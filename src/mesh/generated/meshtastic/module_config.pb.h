/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.9 */

#ifndef PB_MESHTASTIC_MESHTASTIC_MODULE_CONFIG_PB_H_INCLUDED
#define PB_MESHTASTIC_MESHTASTIC_MODULE_CONFIG_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
typedef enum _meshtastic_RemoteHardwarePinType {
    /* Unset/unused */
    meshtastic_RemoteHardwarePinType_UNKNOWN = 0,
    /* GPIO pin can be read (if it is high / low) */
    meshtastic_RemoteHardwarePinType_DIGITAL_READ = 1,
    /* GPIO pin can be written to (high / low) */
    meshtastic_RemoteHardwarePinType_DIGITAL_WRITE = 2
} meshtastic_RemoteHardwarePinType;

typedef enum _meshtastic_ModuleConfig_IdleGameActionType {
    meshtastic_ModuleConfig_IdleGameActionType_ACTION_NONE = 0,
    meshtastic_ModuleConfig_IdleGameActionType_ACTION_ATTACK = 1,
    meshtastic_ModuleConfig_IdleGameActionType_ACTION_TRADE = 2,
    meshtastic_ModuleConfig_IdleGameActionType_ACTION_ALLIANCE = 3,
    meshtastic_ModuleConfig_IdleGameActionType_ACTION_OTHER = 4
} meshtastic_ModuleConfig_IdleGameActionType;

typedef enum _meshtastic_ModuleConfig_DetectionSensorConfig_TriggerType {
    /* Event is triggered if pin is low */
    meshtastic_ModuleConfig_DetectionSensorConfig_TriggerType_LOGIC_LOW = 0,
    /* Event is triggered if pin is high */
    meshtastic_ModuleConfig_DetectionSensorConfig_TriggerType_LOGIC_HIGH = 1,
    /* Event is triggered when pin goes high to low */
    meshtastic_ModuleConfig_DetectionSensorConfig_TriggerType_FALLING_EDGE = 2,
    /* Event is triggered when pin goes low to high */
    meshtastic_ModuleConfig_DetectionSensorConfig_TriggerType_RISING_EDGE = 3,
    /* Event is triggered on every pin state change, low is considered to be
 "active" */
    meshtastic_ModuleConfig_DetectionSensorConfig_TriggerType_EITHER_EDGE_ACTIVE_LOW = 4,
    /* Event is triggered on every pin state change, high is considered to be
 "active" */
    meshtastic_ModuleConfig_DetectionSensorConfig_TriggerType_EITHER_EDGE_ACTIVE_HIGH = 5
} meshtastic_ModuleConfig_DetectionSensorConfig_TriggerType;

/* Baudrate for codec2 voice */
typedef enum _meshtastic_ModuleConfig_AudioConfig_Audio_Baud {
    meshtastic_ModuleConfig_AudioConfig_Audio_Baud_CODEC2_DEFAULT = 0,
    meshtastic_ModuleConfig_AudioConfig_Audio_Baud_CODEC2_3200 = 1,
    meshtastic_ModuleConfig_AudioConfig_Audio_Baud_CODEC2_2400 = 2,
    meshtastic_ModuleConfig_AudioConfig_Audio_Baud_CODEC2_1600 = 3,
    meshtastic_ModuleConfig_AudioConfig_Audio_Baud_CODEC2_1400 = 4,
    meshtastic_ModuleConfig_AudioConfig_Audio_Baud_CODEC2_1300 = 5,
    meshtastic_ModuleConfig_AudioConfig_Audio_Baud_CODEC2_1200 = 6,
    meshtastic_ModuleConfig_AudioConfig_Audio_Baud_CODEC2_700 = 7,
    meshtastic_ModuleConfig_AudioConfig_Audio_Baud_CODEC2_700B = 8
} meshtastic_ModuleConfig_AudioConfig_Audio_Baud;

/* TODO: REPLACE */
typedef enum _meshtastic_ModuleConfig_SerialConfig_Serial_Baud {
    meshtastic_ModuleConfig_SerialConfig_Serial_Baud_BAUD_DEFAULT = 0,
    meshtastic_ModuleConfig_SerialConfig_Serial_Baud_BAUD_110 = 1,
    meshtastic_ModuleConfig_SerialConfig_Serial_Baud_BAUD_300 = 2,
    meshtastic_ModuleConfig_SerialConfig_Serial_Baud_BAUD_600 = 3,
    meshtastic_ModuleConfig_SerialConfig_Serial_Baud_BAUD_1200 = 4,
    meshtastic_ModuleConfig_SerialConfig_Serial_Baud_BAUD_2400 = 5,
    meshtastic_ModuleConfig_SerialConfig_Serial_Baud_BAUD_4800 = 6,
    meshtastic_ModuleConfig_SerialConfig_Serial_Baud_BAUD_9600 = 7,
    meshtastic_ModuleConfig_SerialConfig_Serial_Baud_BAUD_19200 = 8,
    meshtastic_ModuleConfig_SerialConfig_Serial_Baud_BAUD_38400 = 9,
    meshtastic_ModuleConfig_SerialConfig_Serial_Baud_BAUD_57600 = 10,
    meshtastic_ModuleConfig_SerialConfig_Serial_Baud_BAUD_115200 = 11,
    meshtastic_ModuleConfig_SerialConfig_Serial_Baud_BAUD_230400 = 12,
    meshtastic_ModuleConfig_SerialConfig_Serial_Baud_BAUD_460800 = 13,
    meshtastic_ModuleConfig_SerialConfig_Serial_Baud_BAUD_576000 = 14,
    meshtastic_ModuleConfig_SerialConfig_Serial_Baud_BAUD_921600 = 15
} meshtastic_ModuleConfig_SerialConfig_Serial_Baud;

/* TODO: REPLACE */
typedef enum _meshtastic_ModuleConfig_SerialConfig_Serial_Mode {
    meshtastic_ModuleConfig_SerialConfig_Serial_Mode_DEFAULT = 0,
    meshtastic_ModuleConfig_SerialConfig_Serial_Mode_SIMPLE = 1,
    meshtastic_ModuleConfig_SerialConfig_Serial_Mode_PROTO = 2,
    meshtastic_ModuleConfig_SerialConfig_Serial_Mode_TEXTMSG = 3,
    meshtastic_ModuleConfig_SerialConfig_Serial_Mode_NMEA = 4,
    /* NMEA messages specifically tailored for CalTopo */
    meshtastic_ModuleConfig_SerialConfig_Serial_Mode_CALTOPO = 5,
    /* Ecowitt WS85 weather station */
    meshtastic_ModuleConfig_SerialConfig_Serial_Mode_WS85 = 6,
    /* VE.Direct is a serial protocol used by Victron Energy products
 https://beta.ivc.no/wiki/index.php/Victron_VE_Direct_DIY_Cable */
    meshtastic_ModuleConfig_SerialConfig_Serial_Mode_VE_DIRECT = 7,
    /* Used to configure and view some parameters of MeshSolar.
https://heltec.org/project/meshsolar/ */
    meshtastic_ModuleConfig_SerialConfig_Serial_Mode_MS_CONFIG = 8
} meshtastic_ModuleConfig_SerialConfig_Serial_Mode;

/* TODO: REPLACE */
typedef enum _meshtastic_ModuleConfig_CannedMessageConfig_InputEventChar {
    /* TODO: REPLACE */
    meshtastic_ModuleConfig_CannedMessageConfig_InputEventChar_NONE = 0,
    /* TODO: REPLACE */
    meshtastic_ModuleConfig_CannedMessageConfig_InputEventChar_UP = 17,
    /* TODO: REPLACE */
    meshtastic_ModuleConfig_CannedMessageConfig_InputEventChar_DOWN = 18,
    /* TODO: REPLACE */
    meshtastic_ModuleConfig_CannedMessageConfig_InputEventChar_LEFT = 19,
    /* TODO: REPLACE */
    meshtastic_ModuleConfig_CannedMessageConfig_InputEventChar_RIGHT = 20,
    /* '\n' */
    meshtastic_ModuleConfig_CannedMessageConfig_InputEventChar_SELECT = 10,
    /* TODO: REPLACE */
    meshtastic_ModuleConfig_CannedMessageConfig_InputEventChar_BACK = 27,
    /* TODO: REPLACE */
    meshtastic_ModuleConfig_CannedMessageConfig_InputEventChar_CANCEL = 24
} meshtastic_ModuleConfig_CannedMessageConfig_InputEventChar;

/* Struct definitions */
/* Settings for reporting unencrypted information about our node to a map via MQTT */
typedef struct _meshtastic_ModuleConfig_MapReportSettings {
    /* How often we should report our info to the map (in seconds) */
    uint32_t publish_interval_secs;
    /* Bits of precision for the location sent (default of 32 is full precision). */
    uint32_t position_precision;
    /* Whether we have opted-in to report our location to the map */
    bool should_report_location;
} meshtastic_ModuleConfig_MapReportSettings;

/* MQTT Client Config */
typedef struct _meshtastic_ModuleConfig_MQTTConfig {
    /* If a meshtastic node is able to reach the internet it will normally attempt to gateway any channels that are marked as
 is_uplink_enabled or is_downlink_enabled. */
    bool enabled;
    /* The server to use for our MQTT global message gateway feature.
 If not set, the default server will be used */
    char address[64];
    /* MQTT username to use (most useful for a custom MQTT server).
 If using a custom server, this will be honoured even if empty.
 If using the default server, this will only be honoured if set, otherwise the device will use the default username */
    char username[64];
    /* MQTT password to use (most useful for a custom MQTT server).
 If using a custom server, this will be honoured even if empty.
 If using the default server, this will only be honoured if set, otherwise the device will use the default password */
    char password[32];
    /* Whether to send encrypted or decrypted packets to MQTT.
 This parameter is only honoured if you also set server
 (the default official mqtt.meshtastic.org server can handle encrypted packets)
 Decrypted packets may be useful for external systems that want to consume meshtastic packets */
    bool encryption_enabled;
    /* Whether to send / consume json packets on MQTT */
    bool json_enabled;
    /* If true, we attempt to establish a secure connection using TLS */
    bool tls_enabled;
    /* The root topic to use for MQTT messages. Default is "msh".
 This is useful if you want to use a single MQTT server for multiple meshtastic networks and separate them via ACLs */
    char root[32];
    /* If true, we can use the connected phone / client to proxy messages to MQTT instead of a direct connection */
    bool proxy_to_client_enabled;
    /* If true, we will periodically report unencrypted information about our node to a map via MQTT */
    bool map_reporting_enabled;
    /* Settings for reporting information about our node to a map via MQTT */
    bool has_map_report_settings;
    meshtastic_ModuleConfig_MapReportSettings map_report_settings;
} meshtastic_ModuleConfig_MQTTConfig;

/* NeighborInfoModule Config */
typedef struct _meshtastic_ModuleConfig_NeighborInfoConfig {
    /* Whether the Module is enabled */
    bool enabled;
    /* Interval in seconds of how often we should try to send our
 Neighbor Info (minimum is 14400, i.e., 4 hours) */
    uint32_t update_interval;
    /* Whether in addition to sending it to MQTT and the PhoneAPI, our NeighborInfo should be transmitted over LoRa.
 Note that this is not available on a channel with default key and name. */
    bool transmit_over_lora;
} meshtastic_ModuleConfig_NeighborInfoConfig;

/* Detection Sensor Module Config */
typedef struct _meshtastic_ModuleConfig_DetectionSensorConfig {
    /* Whether the Module is enabled */
    bool enabled;
    /* Interval in seconds of how often we can send a message to the mesh when a
 trigger event is detected */
    uint32_t minimum_broadcast_secs;
    /* Interval in seconds of how often we should send a message to the mesh
 with the current state regardless of trigger events When set to 0, only
 trigger events will be broadcasted Works as a sort of status heartbeat
 for peace of mind */
    uint32_t state_broadcast_secs;
    /* Send ASCII bell with alert message
 Useful for triggering ext. notification on bell */
    bool send_bell;
    /* Friendly name used to format message sent to mesh
 Example: A name "Motion" would result in a message "Motion detected"
 Maximum length of 20 characters */
    char name[20];
    /* GPIO pin to monitor for state changes */
    uint8_t monitor_pin;
    /* The type of trigger event to be used */
    meshtastic_ModuleConfig_DetectionSensorConfig_TriggerType detection_trigger_type;
    /* Whether or not use INPUT_PULLUP mode for GPIO pin
 Only applicable if the board uses pull-up resistors on the pin */
    bool use_pullup;
} meshtastic_ModuleConfig_DetectionSensorConfig;

/* Audio Config for codec2 voice */
typedef struct _meshtastic_ModuleConfig_AudioConfig {
    /* Whether Audio is enabled */
    bool codec2_enabled;
    /* PTT Pin */
    uint8_t ptt_pin;
    /* The audio sample rate to use for codec2 */
    meshtastic_ModuleConfig_AudioConfig_Audio_Baud bitrate;
    /* I2S Word Select */
    uint8_t i2s_ws;
    /* I2S Data IN */
    uint8_t i2s_sd;
    /* I2S Data OUT */
    uint8_t i2s_din;
    /* I2S Clock */
    uint8_t i2s_sck;
} meshtastic_ModuleConfig_AudioConfig;

/* Config for the Paxcounter Module */
typedef struct _meshtastic_ModuleConfig_PaxcounterConfig {
    /* Enable the Paxcounter Module */
    bool enabled;
    uint32_t paxcounter_update_interval;
    /* WiFi RSSI threshold. Defaults to -80 */
    int32_t wifi_threshold;
    /* BLE RSSI threshold. Defaults to -80 */
    int32_t ble_threshold;
} meshtastic_ModuleConfig_PaxcounterConfig;

/* Serial Config */
typedef struct _meshtastic_ModuleConfig_SerialConfig {
    /* Preferences for the SerialModule */
    bool enabled;
    /* TODO: REPLACE */
    bool echo;
    /* RX pin (should match Arduino gpio pin number) */
    uint32_t rxd;
    /* TX pin (should match Arduino gpio pin number) */
    uint32_t txd;
    /* Serial baud rate */
    meshtastic_ModuleConfig_SerialConfig_Serial_Baud baud;
    /* TODO: REPLACE */
    uint32_t timeout;
    /* Mode for serial module operation */
    meshtastic_ModuleConfig_SerialConfig_Serial_Mode mode;
    /* Overrides the platform's defacto Serial port instance to use with Serial module config settings
 This is currently only usable in output modes like NMEA / CalTopo and may behave strangely or not work at all in other modes
 Existing logging over the Serial Console will still be present */
    bool override_console_serial_port;
} meshtastic_ModuleConfig_SerialConfig;

/* External Notifications Config */
typedef struct _meshtastic_ModuleConfig_ExternalNotificationConfig {
    /* Enable the ExternalNotificationModule */
    bool enabled;
    /* When using in On/Off mode, keep the output on for this many
 milliseconds. Default 1000ms (1 second). */
    uint32_t output_ms;
    /* Define the output pin GPIO setting Defaults to
 EXT_NOTIFY_OUT if set for the board.
 In standalone devices this pin should drive the LED to match the UI. */
    uint32_t output;
    /* IF this is true, the 'output' Pin will be pulled active high, false
 means active low. */
    bool active;
    /* True: Alert when a text message arrives (output) */
    bool alert_message;
    /* True: Alert when the bell character is received (output) */
    bool alert_bell;
    /* use a PWM output instead of a simple on/off output. This will ignore
 the 'output', 'output_ms' and 'active' settings and use the
 device.buzzer_gpio instead. */
    bool use_pwm;
    /* Optional: Define a secondary output pin for a vibra motor
 This is used in standalone devices to match the UI. */
    uint8_t output_vibra;
    /* Optional: Define a tertiary output pin for an active buzzer
 This is used in standalone devices to to match the UI. */
    uint8_t output_buzzer;
    /* True: Alert when a text message arrives (output_vibra) */
    bool alert_message_vibra;
    /* True: Alert when a text message arrives (output_buzzer) */
    bool alert_message_buzzer;
    /* True: Alert when the bell character is received (output_vibra) */
    bool alert_bell_vibra;
    /* True: Alert when the bell character is received (output_buzzer) */
    bool alert_bell_buzzer;
    /* The notification will toggle with 'output_ms' for this time of seconds.
 Default is 0 which means don't repeat at all. 60 would mean blink
 and/or beep for 60 seconds */
    uint16_t nag_timeout;
    /* When true, enables devices with native I2S audio output to use the RTTTL over speaker like a buzzer
 T-Watch S3 and T-Deck for example have this capability */
    bool use_i2s_as_buzzer;
} meshtastic_ModuleConfig_ExternalNotificationConfig;

/* Store and Forward Module Config */
typedef struct _meshtastic_ModuleConfig_StoreForwardConfig {
    /* Enable the Store and Forward Module */
    bool enabled;
    /* TODO: REPLACE */
    bool heartbeat;
    /* TODO: REPLACE */
    uint32_t records;
    /* TODO: REPLACE */
    uint32_t history_return_max;
    /* TODO: REPLACE */
    uint32_t history_return_window;
    /* Set to true to let this node act as a server that stores received messages and resends them upon request. */
    bool is_server;
    /* fw+ Emit FW+ custody control signals (CA/DR/DF) for S&F; ignored by stock nodes */
    bool emit_control_signals; /* fw+ */
} meshtastic_ModuleConfig_StoreForwardConfig;

/* Preferences for the RangeTestModule */
typedef struct _meshtastic_ModuleConfig_RangeTestConfig {
    /* Enable the Range Test Module */
    bool enabled;
    /* Send out range test messages from this node */
    uint32_t sender;
    /* Bool value indicating that this node should save a RangeTest.csv file.
 ESP32 Only */
    bool save;
    /* Bool indicating that the node should cleanup / destroy it's RangeTest.csv file.
 ESP32 Only */
    bool clear_on_reboot;
} meshtastic_ModuleConfig_RangeTestConfig;

/* Configuration for both device and environment metrics */
typedef struct _meshtastic_ModuleConfig_TelemetryConfig {
    /* Interval in seconds of how often we should try to send our
 device metrics to the mesh */
    uint32_t device_update_interval;
    uint32_t environment_update_interval;
    /* Preferences for the Telemetry Module (Environment)
 Enable/Disable the telemetry measurement module measurement collection */
    bool environment_measurement_enabled;
    /* Enable/Disable the telemetry measurement module on-device display */
    bool environment_screen_enabled;
    /* We'll always read the sensor in Celsius, but sometimes we might want to
 display the results in Fahrenheit as a "user preference". */
    bool environment_display_fahrenheit;
    /* Enable/Disable the air quality metrics */
    bool air_quality_enabled;
    /* Interval in seconds of how often we should try to send our
 air quality metrics to the mesh */
    uint32_t air_quality_interval;
    /* Enable/disable Power metrics */
    bool power_measurement_enabled;
    /* Interval in seconds of how often we should try to send our
 power metrics to the mesh */
    uint32_t power_update_interval;
    /* Enable/Disable the power measurement module on-device display */
    bool power_screen_enabled;
    /* Preferences for the (Health) Telemetry Module
 Enable/Disable the telemetry measurement module measurement collection */
    bool health_measurement_enabled;
    /* Interval in seconds of how often we should try to send our
 health metrics to the mesh */
    uint32_t health_update_interval;
    /* Enable/Disable the health telemetry module on-device display */
    bool health_screen_enabled;
    /* Enable/Disable the device telemetry module to send metrics to the mesh
 Note: We will still send telemtry to the connected phone / client every minute over the API */
    bool device_telemetry_enabled;
} meshtastic_ModuleConfig_TelemetryConfig;

/* Canned Messages Module Config */
typedef struct _meshtastic_ModuleConfig_CannedMessageConfig {
    /* Enable the rotary encoder #1. This is a 'dumb' encoder sending pulses on both A and B pins while rotating. */
    bool rotary1_enabled;
    /* GPIO pin for rotary encoder A port. */
    uint32_t inputbroker_pin_a;
    /* GPIO pin for rotary encoder B port. */
    uint32_t inputbroker_pin_b;
    /* GPIO pin for rotary encoder Press port. */
    uint32_t inputbroker_pin_press;
    /* Generate input event on CW of this kind. */
    meshtastic_ModuleConfig_CannedMessageConfig_InputEventChar inputbroker_event_cw;
    /* Generate input event on CCW of this kind. */
    meshtastic_ModuleConfig_CannedMessageConfig_InputEventChar inputbroker_event_ccw;
    /* Generate input event on Press of this kind. */
    meshtastic_ModuleConfig_CannedMessageConfig_InputEventChar inputbroker_event_press;
    /* Enable the Up/Down/Select input device. Can be RAK rotary encoder or 3 buttons. Uses the a/b/press definitions from inputbroker. */
    bool updown1_enabled;
    /* Enable/disable CannedMessageModule. */
    bool enabled;
    /* Input event origin accepted by the canned message module.
 Can be e.g. "rotEnc1", "upDownEnc1", "scanAndSelect", "cardkb", "serialkb", or keyword "_any" */
    char allow_input_source[16];
    /* CannedMessageModule also sends a bell character with the messages.
 ExternalNotificationModule can benefit from this feature. */
    bool send_bell;
} meshtastic_ModuleConfig_CannedMessageConfig;

/* Ambient Lighting Module - Settings for control of onboard LEDs to allow users to adjust the brightness levels and respective color levels.
Initially created for the RAK14001 RGB LED module. */
typedef struct _meshtastic_ModuleConfig_AmbientLightingConfig {
    /* Sets LED to on or off. */
    bool led_state;
    /* Sets the current for the LED output. Default is 10. */
    uint8_t current;
    /* Sets the red LED level. Values are 0-255. */
    uint8_t red;
    /* Sets the green LED level. Values are 0-255. */
    uint8_t green;
    /* Sets the blue LED level. Values are 0-255. */
    uint8_t blue;
} meshtastic_ModuleConfig_AmbientLightingConfig;

typedef struct _meshtastic_ModuleConfig_NodeModConfig {
    /* user text status */
    char text_status[200];
    /* node emoji */
    char emoji[4];
} meshtastic_ModuleConfig_NodeModConfig;

typedef struct _meshtastic_ModuleConfig_NodeModAdminConfig {
    /* sniffer enabled */
    bool sniffer_enabled;
    /* do not send prv over mqtt */
    bool do_not_send_prv_over_mqtt;
    /* local stats over mesh enabled */
    bool local_stats_over_mesh_enabled;
    /* local stats extended over mesh enabled */
    bool local_stats_extended_over_mesh_enabled;
    /* idlegame enabled */
    bool idlegame_enabled;
    /* base ch util + additional chan utilization defined by user */
    uint8_t additional_chutil;
    /* base tx util + additional tx chan utilization defined by user */
    float additional_txutil;
    /* additional chutil polite percent defined by user */
    uint8_t additional_polite_channel_percent;
    /* additional chutil polite percent defined by user */
    uint8_t additional_polite_duty_cycle_percent;
    /* current tx util limit */
    float current_tx_util_limit;
    /* current nmax channel util percent */
    uint8_t current_max_channel_util_percent;
    /* current polite channel util percent */
    uint8_t current_polite_channel_util_percent;
    /* current polite duty cycle percent */
    uint8_t current_polite_duty_cycle_percent;
    /* auto responder */
    bool auto_responder_enabled;
    /* auto responder text */
    char auto_responder_text[60];
    /* auto responder */
    bool auto_redirect_messages;
    /* auto responder text */
    uint32_t auto_redirect_target_node_id;
    /* telemetry limiter enabled */
    bool telemetry_limiter_enabled;
    /* telemetry limiter, limit telemetry per minute */
    uint8_t telemetry_limiter_packets_per_minute;
    /* telemetry limiter, auto chanUtil limiter */
    bool telemetry_limiter_auto_chanutil_enabled;
    /* telemetry limiter, limit telemetry per minute */
    uint8_t telemetry_limiter_auto_chanutil_threshold;
    /* position limiter, enabled */
    bool position_limiter_enabled;
    /* position limiter, time threshold */
    uint32_t position_limiter_time_minutes_threshold;
    /* opportunistic rebroadcast for flooding */
    bool opportunistic_flooding_enabled;
    uint32_t opportunistic_base_delay_ms;
    uint32_t opportunistic_hop_delay_ms;
    uint32_t opportunistic_snr_gain_ms;
    uint32_t opportunistic_jitter_ms;
    bool opportunistic_cancel_on_first_hear;
    bool opportunistic_auto;
    /* Proactive traceroute scheduling and TTL controls (FW+) */
    bool proactive_traceroute_enabled;
    uint32_t traceroute_stale_ratio_threshold_percent;
    uint32_t traceroute_global_cooldown_hours;
    uint32_t traceroute_per_dest_cooldown_hours;
    uint32_t traceroute_chanutil_threshold_percent;
    uint32_t traceroute_max_per_day;
    uint32_t traceroute_expanding_ring_initial_hop;
    uint32_t traceroute_expanding_ring_max_hops;
    uint32_t traceroute_probe_jitter_ms;
    /* Optional TTL override (hours); 0 means use firmware defaults */
    uint32_t route_ttl_base_hours;
    uint32_t route_ttl_per_conf_hours;
    uint32_t route_ttl_max_hours;
    /* Routing learning thresholds (FW+)
 Minimal confidence required to use a learned route. 0 means firmware default (1). */
    uint32_t min_confidence_to_use;
    /* Hysteresis threshold for next-hop promotion in tenths of a cost unit (ETX).
 0 means firmware default (5 => 0.5 cost units). */
    uint32_t hysteresis_cost_threshold_tenths;
    /* fw+ Force disable HTTPS web server regardless of automation. Default false (HTTPS enabled).
 When true, firmware must not start HTTPS even if PSRAM is available. */
    bool force_disable_https; /* fw+ */
} meshtastic_ModuleConfig_NodeModAdminConfig;

/* fw+ DTN overlay configuration */
typedef struct _meshtastic_ModuleConfig_DtnOverlayConfig {
    /* Enable FW+ DTN overlay module (default: false) */
    bool enabled;
    /* Absolute TTL in minutes for DM overlay deliveries (default: 4) */
    uint16_t ttl_minutes;
    /* Initial delay base in milliseconds before first attempt (default: 2000) */
    uint32_t initial_delay_base_ms;
    /* Retry backoff base in milliseconds between attempts (default: 120000) */
    uint32_t retry_backoff_ms;
    /* Maximum tries before declaring failed (default: 2) */
    uint8_t max_tries;
    /* Enable late proxy fallback to native DM near deadline (default: false) */
    bool late_fallback_enabled;
    /* Fallback window portion of TTL in percent near deadline (default: 20) */
    uint8_t fallback_tail_percent;
    /* Enable milestone progress receipts for telemetry (default: false) */
    bool milestones_enabled;
    /* Minimum spacing between attempts to same destination in ms (default: 120000) */
    uint16_t per_dest_min_spacing_ms;
    /* Global cap of concurrently active DTN DMs per node (default: 1) */
    uint8_t max_active_dm;
    /* Probe FW+ capability near deadline if dest capability unknown (default: false) */
    bool probe_fwplus_near_deadline;
} meshtastic_ModuleConfig_DtnOverlayConfig;

/* fw+ Broadcast Assist configuration for controlled reflooding of broadcasts */
typedef struct _meshtastic_ModuleConfig_BroadcastAssistConfig {
    /* Enable the module */
    bool enabled;
    /* Only reflood when estimated neighbors are at or below this threshold (0 disables check) */
    uint8_t degree_threshold;
    /* Suppress reflood if we heard at least this many duplicates within window (0 disables) */
    uint8_t dup_threshold;
    /* Time window for duplicate counting, in milliseconds */
    uint16_t window_ms;
    /* Max extra hops we add when reflooding */
    uint8_t max_extra_hops;
    /* Random jitter before reflood to avoid collisions */
    uint16_t jitter_ms;
    /* Check airtime utilization before reflooding (be polite) */
    bool airtime_guard;
    /* Whitelisted port numbers to consider for reflooding (values from PortNum) */
    pb_size_t allowed_ports_count;
    uint32_t allowed_ports[8];
} meshtastic_ModuleConfig_BroadcastAssistConfig;

typedef PB_BYTES_ARRAY_T(1) meshtastic_ModuleConfig_IdleGameAlliance_morale_bonus_t;
typedef struct _meshtastic_ModuleConfig_IdleGameAlliance {
    uint8_t node_id;
    uint8_t started_at;
    meshtastic_ModuleConfig_IdleGameAlliance_morale_bonus_t morale_bonus;
} meshtastic_ModuleConfig_IdleGameAlliance;

typedef struct _meshtastic_ModuleConfig_IdleGamePatron {
    uint8_t node_id;
    uint8_t started_at;
} meshtastic_ModuleConfig_IdleGamePatron;

typedef struct _meshtastic_ModuleConfig_IdleGameRelations {
    pb_size_t alliances_count;
    meshtastic_ModuleConfig_IdleGameAlliance alliances[4];
    pb_size_t patrons_count;
    meshtastic_ModuleConfig_IdleGamePatron patrons[4];
} meshtastic_ModuleConfig_IdleGameRelations;

typedef struct _meshtastic_ModuleConfig_IdleGameState {
    char village_name[18];
    uint8_t population;
    uint8_t resources;
    uint8_t defense;
    uint8_t technology;
    uint8_t node_id;
    uint32_t level;
    uint32_t version;
} meshtastic_ModuleConfig_IdleGameState;

typedef struct _meshtastic_ModuleConfig_IdleGameKnownVillages {
    pb_size_t known_count;
    meshtastic_ModuleConfig_IdleGameState known[10];
} meshtastic_ModuleConfig_IdleGameKnownVillages;

typedef struct _meshtastic_ModuleConfig_IdleGameAction {
    meshtastic_ModuleConfig_IdleGameActionType action_type;
    uint8_t from_node_id_village;
    uint8_t to_node_id_village;
    uint8_t quantity;
} meshtastic_ModuleConfig_IdleGameAction;

typedef struct _meshtastic_ModuleConfig_IdleGameConfig {
    pb_size_t which_variant;
    union {
        meshtastic_ModuleConfig_IdleGameState state;
        meshtastic_ModuleConfig_IdleGameAction action;
        meshtastic_ModuleConfig_IdleGameKnownVillages known_villages;
        meshtastic_ModuleConfig_IdleGameRelations relations;
    } variant;
} meshtastic_ModuleConfig_IdleGameConfig;

/* A GPIO pin definition for remote hardware module */
typedef struct _meshtastic_RemoteHardwarePin {
    /* GPIO Pin number (must match Arduino) */
    uint8_t gpio_pin;
    /* Name for the GPIO pin (i.e. Front gate, mailbox, etc) */
    char name[15];
    /* Type of GPIO access available to consumers on the mesh */
    meshtastic_RemoteHardwarePinType type;
} meshtastic_RemoteHardwarePin;

/* RemoteHardwareModule Config */
typedef struct _meshtastic_ModuleConfig_RemoteHardwareConfig {
    /* Whether the Module is enabled */
    bool enabled;
    /* Whether the Module allows consumers to read / write to pins not defined in available_pins */
    bool allow_undefined_pin_access;
    /* Exposes the available pins to the mesh for reading and writing */
    pb_size_t available_pins_count;
    meshtastic_RemoteHardwarePin available_pins[4];
} meshtastic_ModuleConfig_RemoteHardwareConfig;

/* Module Config */
typedef struct _meshtastic_ModuleConfig {
    pb_size_t which_payload_variant;
    union {
        /* TODO: REPLACE */
        meshtastic_ModuleConfig_MQTTConfig mqtt;
        /* TODO: REPLACE */
        meshtastic_ModuleConfig_SerialConfig serial;
        /* TODO: REPLACE */
        meshtastic_ModuleConfig_ExternalNotificationConfig external_notification;
        /* TODO: REPLACE */
        meshtastic_ModuleConfig_StoreForwardConfig store_forward;
        /* TODO: REPLACE */
        meshtastic_ModuleConfig_RangeTestConfig range_test;
        /* TODO: REPLACE */
        meshtastic_ModuleConfig_TelemetryConfig telemetry;
        /* TODO: REPLACE */
        meshtastic_ModuleConfig_CannedMessageConfig canned_message;
        /* TODO: REPLACE */
        meshtastic_ModuleConfig_AudioConfig audio;
        /* TODO: REPLACE */
        meshtastic_ModuleConfig_RemoteHardwareConfig remote_hardware;
        /* TODO: REPLACE */
        meshtastic_ModuleConfig_NeighborInfoConfig neighbor_info;
        /* TODO: REPLACE */
        meshtastic_ModuleConfig_AmbientLightingConfig ambient_lighting;
        /* TODO: REPLACE */
        meshtastic_ModuleConfig_DetectionSensorConfig detection_sensor;
        /* TODO: REPLACE */
        meshtastic_ModuleConfig_PaxcounterConfig paxcounter;
        meshtastic_ModuleConfig_NodeModConfig node_mod;
        meshtastic_ModuleConfig_NodeModAdminConfig node_mod_admin;
        meshtastic_ModuleConfig_IdleGameConfig idle_game;
        meshtastic_ModuleConfig_DtnOverlayConfig dtn_overlay;
        /* fw+ Broadcast Assist module config */
        meshtastic_ModuleConfig_BroadcastAssistConfig broadcast_assist;
    } payload_variant;
} meshtastic_ModuleConfig;


#ifdef __cplusplus
extern "C" {
#endif

/* Helper constants for enums */
#define _meshtastic_RemoteHardwarePinType_MIN meshtastic_RemoteHardwarePinType_UNKNOWN
#define _meshtastic_RemoteHardwarePinType_MAX meshtastic_RemoteHardwarePinType_DIGITAL_WRITE
#define _meshtastic_RemoteHardwarePinType_ARRAYSIZE ((meshtastic_RemoteHardwarePinType)(meshtastic_RemoteHardwarePinType_DIGITAL_WRITE+1))

#define _meshtastic_ModuleConfig_IdleGameActionType_MIN meshtastic_ModuleConfig_IdleGameActionType_ACTION_NONE
#define _meshtastic_ModuleConfig_IdleGameActionType_MAX meshtastic_ModuleConfig_IdleGameActionType_ACTION_OTHER
#define _meshtastic_ModuleConfig_IdleGameActionType_ARRAYSIZE ((meshtastic_ModuleConfig_IdleGameActionType)(meshtastic_ModuleConfig_IdleGameActionType_ACTION_OTHER+1))

#define _meshtastic_ModuleConfig_DetectionSensorConfig_TriggerType_MIN meshtastic_ModuleConfig_DetectionSensorConfig_TriggerType_LOGIC_LOW
#define _meshtastic_ModuleConfig_DetectionSensorConfig_TriggerType_MAX meshtastic_ModuleConfig_DetectionSensorConfig_TriggerType_EITHER_EDGE_ACTIVE_HIGH
#define _meshtastic_ModuleConfig_DetectionSensorConfig_TriggerType_ARRAYSIZE ((meshtastic_ModuleConfig_DetectionSensorConfig_TriggerType)(meshtastic_ModuleConfig_DetectionSensorConfig_TriggerType_EITHER_EDGE_ACTIVE_HIGH+1))

#define _meshtastic_ModuleConfig_AudioConfig_Audio_Baud_MIN meshtastic_ModuleConfig_AudioConfig_Audio_Baud_CODEC2_DEFAULT
#define _meshtastic_ModuleConfig_AudioConfig_Audio_Baud_MAX meshtastic_ModuleConfig_AudioConfig_Audio_Baud_CODEC2_700B
#define _meshtastic_ModuleConfig_AudioConfig_Audio_Baud_ARRAYSIZE ((meshtastic_ModuleConfig_AudioConfig_Audio_Baud)(meshtastic_ModuleConfig_AudioConfig_Audio_Baud_CODEC2_700B+1))

#define _meshtastic_ModuleConfig_SerialConfig_Serial_Baud_MIN meshtastic_ModuleConfig_SerialConfig_Serial_Baud_BAUD_DEFAULT
#define _meshtastic_ModuleConfig_SerialConfig_Serial_Baud_MAX meshtastic_ModuleConfig_SerialConfig_Serial_Baud_BAUD_921600
#define _meshtastic_ModuleConfig_SerialConfig_Serial_Baud_ARRAYSIZE ((meshtastic_ModuleConfig_SerialConfig_Serial_Baud)(meshtastic_ModuleConfig_SerialConfig_Serial_Baud_BAUD_921600+1))

#define _meshtastic_ModuleConfig_SerialConfig_Serial_Mode_MIN meshtastic_ModuleConfig_SerialConfig_Serial_Mode_DEFAULT
#define _meshtastic_ModuleConfig_SerialConfig_Serial_Mode_MAX meshtastic_ModuleConfig_SerialConfig_Serial_Mode_MS_CONFIG
#define _meshtastic_ModuleConfig_SerialConfig_Serial_Mode_ARRAYSIZE ((meshtastic_ModuleConfig_SerialConfig_Serial_Mode)(meshtastic_ModuleConfig_SerialConfig_Serial_Mode_MS_CONFIG+1))

#define _meshtastic_ModuleConfig_CannedMessageConfig_InputEventChar_MIN meshtastic_ModuleConfig_CannedMessageConfig_InputEventChar_NONE
#define _meshtastic_ModuleConfig_CannedMessageConfig_InputEventChar_MAX meshtastic_ModuleConfig_CannedMessageConfig_InputEventChar_BACK
#define _meshtastic_ModuleConfig_CannedMessageConfig_InputEventChar_ARRAYSIZE ((meshtastic_ModuleConfig_CannedMessageConfig_InputEventChar)(meshtastic_ModuleConfig_CannedMessageConfig_InputEventChar_BACK+1))






#define meshtastic_ModuleConfig_DetectionSensorConfig_detection_trigger_type_ENUMTYPE meshtastic_ModuleConfig_DetectionSensorConfig_TriggerType

#define meshtastic_ModuleConfig_AudioConfig_bitrate_ENUMTYPE meshtastic_ModuleConfig_AudioConfig_Audio_Baud


#define meshtastic_ModuleConfig_SerialConfig_baud_ENUMTYPE meshtastic_ModuleConfig_SerialConfig_Serial_Baud
#define meshtastic_ModuleConfig_SerialConfig_mode_ENUMTYPE meshtastic_ModuleConfig_SerialConfig_Serial_Mode





#define meshtastic_ModuleConfig_CannedMessageConfig_inputbroker_event_cw_ENUMTYPE meshtastic_ModuleConfig_CannedMessageConfig_InputEventChar
#define meshtastic_ModuleConfig_CannedMessageConfig_inputbroker_event_ccw_ENUMTYPE meshtastic_ModuleConfig_CannedMessageConfig_InputEventChar
#define meshtastic_ModuleConfig_CannedMessageConfig_inputbroker_event_press_ENUMTYPE meshtastic_ModuleConfig_CannedMessageConfig_InputEventChar











#define meshtastic_ModuleConfig_IdleGameAction_action_type_ENUMTYPE meshtastic_ModuleConfig_IdleGameActionType


#define meshtastic_RemoteHardwarePin_type_ENUMTYPE meshtastic_RemoteHardwarePinType


/* Initializer values for message structs */
#define meshtastic_ModuleConfig_init_default     {0, {meshtastic_ModuleConfig_MQTTConfig_init_default}}
#define meshtastic_ModuleConfig_MQTTConfig_init_default {0, "", "", "", 0, 0, 0, "", 0, 0, false, meshtastic_ModuleConfig_MapReportSettings_init_default}
#define meshtastic_ModuleConfig_MapReportSettings_init_default {0, 0, 0}
#define meshtastic_ModuleConfig_RemoteHardwareConfig_init_default {0, 0, 0, {meshtastic_RemoteHardwarePin_init_default, meshtastic_RemoteHardwarePin_init_default, meshtastic_RemoteHardwarePin_init_default, meshtastic_RemoteHardwarePin_init_default}}
#define meshtastic_ModuleConfig_NeighborInfoConfig_init_default {0, 0, 0}
#define meshtastic_ModuleConfig_DetectionSensorConfig_init_default {0, 0, 0, 0, "", 0, _meshtastic_ModuleConfig_DetectionSensorConfig_TriggerType_MIN, 0}
#define meshtastic_ModuleConfig_AudioConfig_init_default {0, 0, _meshtastic_ModuleConfig_AudioConfig_Audio_Baud_MIN, 0, 0, 0, 0}
#define meshtastic_ModuleConfig_PaxcounterConfig_init_default {0, 0, 0, 0}
#define meshtastic_ModuleConfig_SerialConfig_init_default {0, 0, 0, 0, _meshtastic_ModuleConfig_SerialConfig_Serial_Baud_MIN, 0, _meshtastic_ModuleConfig_SerialConfig_Serial_Mode_MIN, 0}
#define meshtastic_ModuleConfig_ExternalNotificationConfig_init_default {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
#define meshtastic_ModuleConfig_StoreForwardConfig_init_default {0, 0, 0, 0, 0, 0, 0}
#define meshtastic_ModuleConfig_RangeTestConfig_init_default {0, 0, 0, 0}
#define meshtastic_ModuleConfig_TelemetryConfig_init_default {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
#define meshtastic_ModuleConfig_CannedMessageConfig_init_default {0, 0, 0, 0, _meshtastic_ModuleConfig_CannedMessageConfig_InputEventChar_MIN, _meshtastic_ModuleConfig_CannedMessageConfig_InputEventChar_MIN, _meshtastic_ModuleConfig_CannedMessageConfig_InputEventChar_MIN, 0, 0, "", 0}
#define meshtastic_ModuleConfig_AmbientLightingConfig_init_default {0, 0, 0, 0, 0}
#define meshtastic_ModuleConfig_NodeModConfig_init_default {"", ""}
#define meshtastic_ModuleConfig_NodeModAdminConfig_init_default {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
#define meshtastic_ModuleConfig_DtnOverlayConfig_init_default {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
#define meshtastic_ModuleConfig_BroadcastAssistConfig_init_default {0, 0, 0, 0, 0, 0, 0, 0, {0, 0, 0, 0, 0, 0, 0, 0}}
#define meshtastic_ModuleConfig_IdleGameKnownVillages_init_default {0, {meshtastic_ModuleConfig_IdleGameState_init_default, meshtastic_ModuleConfig_IdleGameState_init_default, meshtastic_ModuleConfig_IdleGameState_init_default, meshtastic_ModuleConfig_IdleGameState_init_default, meshtastic_ModuleConfig_IdleGameState_init_default, meshtastic_ModuleConfig_IdleGameState_init_default, meshtastic_ModuleConfig_IdleGameState_init_default, meshtastic_ModuleConfig_IdleGameState_init_default, meshtastic_ModuleConfig_IdleGameState_init_default, meshtastic_ModuleConfig_IdleGameState_init_default}}
#define meshtastic_ModuleConfig_IdleGameAlliance_init_default {0, 0, {0, {0}}}
#define meshtastic_ModuleConfig_IdleGamePatron_init_default {0, 0}
#define meshtastic_ModuleConfig_IdleGameRelations_init_default {0, {meshtastic_ModuleConfig_IdleGameAlliance_init_default, meshtastic_ModuleConfig_IdleGameAlliance_init_default, meshtastic_ModuleConfig_IdleGameAlliance_init_default, meshtastic_ModuleConfig_IdleGameAlliance_init_default}, 0, {meshtastic_ModuleConfig_IdleGamePatron_init_default, meshtastic_ModuleConfig_IdleGamePatron_init_default, meshtastic_ModuleConfig_IdleGamePatron_init_default, meshtastic_ModuleConfig_IdleGamePatron_init_default}}
#define meshtastic_ModuleConfig_IdleGameState_init_default {"", 0, 0, 0, 0, 0, 0, 0}
#define meshtastic_ModuleConfig_IdleGameAction_init_default {_meshtastic_ModuleConfig_IdleGameActionType_MIN, 0, 0, 0}
#define meshtastic_ModuleConfig_IdleGameConfig_init_default {0, {meshtastic_ModuleConfig_IdleGameState_init_default}}
#define meshtastic_RemoteHardwarePin_init_default {0, "", _meshtastic_RemoteHardwarePinType_MIN}
#define meshtastic_ModuleConfig_init_zero        {0, {meshtastic_ModuleConfig_MQTTConfig_init_zero}}
#define meshtastic_ModuleConfig_MQTTConfig_init_zero {0, "", "", "", 0, 0, 0, "", 0, 0, false, meshtastic_ModuleConfig_MapReportSettings_init_zero}
#define meshtastic_ModuleConfig_MapReportSettings_init_zero {0, 0, 0}
#define meshtastic_ModuleConfig_RemoteHardwareConfig_init_zero {0, 0, 0, {meshtastic_RemoteHardwarePin_init_zero, meshtastic_RemoteHardwarePin_init_zero, meshtastic_RemoteHardwarePin_init_zero, meshtastic_RemoteHardwarePin_init_zero}}
#define meshtastic_ModuleConfig_NeighborInfoConfig_init_zero {0, 0, 0}
#define meshtastic_ModuleConfig_DetectionSensorConfig_init_zero {0, 0, 0, 0, "", 0, _meshtastic_ModuleConfig_DetectionSensorConfig_TriggerType_MIN, 0}
#define meshtastic_ModuleConfig_AudioConfig_init_zero {0, 0, _meshtastic_ModuleConfig_AudioConfig_Audio_Baud_MIN, 0, 0, 0, 0}
#define meshtastic_ModuleConfig_PaxcounterConfig_init_zero {0, 0, 0, 0}
#define meshtastic_ModuleConfig_SerialConfig_init_zero {0, 0, 0, 0, _meshtastic_ModuleConfig_SerialConfig_Serial_Baud_MIN, 0, _meshtastic_ModuleConfig_SerialConfig_Serial_Mode_MIN, 0}
#define meshtastic_ModuleConfig_ExternalNotificationConfig_init_zero {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
#define meshtastic_ModuleConfig_StoreForwardConfig_init_zero {0, 0, 0, 0, 0, 0, 0}
#define meshtastic_ModuleConfig_RangeTestConfig_init_zero {0, 0, 0, 0}
#define meshtastic_ModuleConfig_TelemetryConfig_init_zero {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
#define meshtastic_ModuleConfig_CannedMessageConfig_init_zero {0, 0, 0, 0, _meshtastic_ModuleConfig_CannedMessageConfig_InputEventChar_MIN, _meshtastic_ModuleConfig_CannedMessageConfig_InputEventChar_MIN, _meshtastic_ModuleConfig_CannedMessageConfig_InputEventChar_MIN, 0, 0, "", 0}
#define meshtastic_ModuleConfig_AmbientLightingConfig_init_zero {0, 0, 0, 0, 0}
#define meshtastic_ModuleConfig_NodeModConfig_init_zero {"", ""}
#define meshtastic_ModuleConfig_NodeModAdminConfig_init_zero {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
#define meshtastic_ModuleConfig_DtnOverlayConfig_init_zero {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
#define meshtastic_ModuleConfig_BroadcastAssistConfig_init_zero {0, 0, 0, 0, 0, 0, 0, 0, {0, 0, 0, 0, 0, 0, 0, 0}}
#define meshtastic_ModuleConfig_IdleGameKnownVillages_init_zero {0, {meshtastic_ModuleConfig_IdleGameState_init_zero, meshtastic_ModuleConfig_IdleGameState_init_zero, meshtastic_ModuleConfig_IdleGameState_init_zero, meshtastic_ModuleConfig_IdleGameState_init_zero, meshtastic_ModuleConfig_IdleGameState_init_zero, meshtastic_ModuleConfig_IdleGameState_init_zero, meshtastic_ModuleConfig_IdleGameState_init_zero, meshtastic_ModuleConfig_IdleGameState_init_zero, meshtastic_ModuleConfig_IdleGameState_init_zero, meshtastic_ModuleConfig_IdleGameState_init_zero}}
#define meshtastic_ModuleConfig_IdleGameAlliance_init_zero {0, 0, {0, {0}}}
#define meshtastic_ModuleConfig_IdleGamePatron_init_zero {0, 0}
#define meshtastic_ModuleConfig_IdleGameRelations_init_zero {0, {meshtastic_ModuleConfig_IdleGameAlliance_init_zero, meshtastic_ModuleConfig_IdleGameAlliance_init_zero, meshtastic_ModuleConfig_IdleGameAlliance_init_zero, meshtastic_ModuleConfig_IdleGameAlliance_init_zero}, 0, {meshtastic_ModuleConfig_IdleGamePatron_init_zero, meshtastic_ModuleConfig_IdleGamePatron_init_zero, meshtastic_ModuleConfig_IdleGamePatron_init_zero, meshtastic_ModuleConfig_IdleGamePatron_init_zero}}
#define meshtastic_ModuleConfig_IdleGameState_init_zero {"", 0, 0, 0, 0, 0, 0, 0}
#define meshtastic_ModuleConfig_IdleGameAction_init_zero {_meshtastic_ModuleConfig_IdleGameActionType_MIN, 0, 0, 0}
#define meshtastic_ModuleConfig_IdleGameConfig_init_zero {0, {meshtastic_ModuleConfig_IdleGameState_init_zero}}
#define meshtastic_RemoteHardwarePin_init_zero   {0, "", _meshtastic_RemoteHardwarePinType_MIN}

/* Field tags (for use in manual encoding/decoding) */
#define meshtastic_ModuleConfig_MapReportSettings_publish_interval_secs_tag 1
#define meshtastic_ModuleConfig_MapReportSettings_position_precision_tag 2
#define meshtastic_ModuleConfig_MapReportSettings_should_report_location_tag 3
#define meshtastic_ModuleConfig_MQTTConfig_enabled_tag 1
#define meshtastic_ModuleConfig_MQTTConfig_address_tag 2
#define meshtastic_ModuleConfig_MQTTConfig_username_tag 3
#define meshtastic_ModuleConfig_MQTTConfig_password_tag 4
#define meshtastic_ModuleConfig_MQTTConfig_encryption_enabled_tag 5
#define meshtastic_ModuleConfig_MQTTConfig_json_enabled_tag 6
#define meshtastic_ModuleConfig_MQTTConfig_tls_enabled_tag 7
#define meshtastic_ModuleConfig_MQTTConfig_root_tag 8
#define meshtastic_ModuleConfig_MQTTConfig_proxy_to_client_enabled_tag 9
#define meshtastic_ModuleConfig_MQTTConfig_map_reporting_enabled_tag 10
#define meshtastic_ModuleConfig_MQTTConfig_map_report_settings_tag 11
#define meshtastic_ModuleConfig_NeighborInfoConfig_enabled_tag 1
#define meshtastic_ModuleConfig_NeighborInfoConfig_update_interval_tag 2
#define meshtastic_ModuleConfig_NeighborInfoConfig_transmit_over_lora_tag 3
#define meshtastic_ModuleConfig_DetectionSensorConfig_enabled_tag 1
#define meshtastic_ModuleConfig_DetectionSensorConfig_minimum_broadcast_secs_tag 2
#define meshtastic_ModuleConfig_DetectionSensorConfig_state_broadcast_secs_tag 3
#define meshtastic_ModuleConfig_DetectionSensorConfig_send_bell_tag 4
#define meshtastic_ModuleConfig_DetectionSensorConfig_name_tag 5
#define meshtastic_ModuleConfig_DetectionSensorConfig_monitor_pin_tag 6
#define meshtastic_ModuleConfig_DetectionSensorConfig_detection_trigger_type_tag 7
#define meshtastic_ModuleConfig_DetectionSensorConfig_use_pullup_tag 8
#define meshtastic_ModuleConfig_AudioConfig_codec2_enabled_tag 1
#define meshtastic_ModuleConfig_AudioConfig_ptt_pin_tag 2
#define meshtastic_ModuleConfig_AudioConfig_bitrate_tag 3
#define meshtastic_ModuleConfig_AudioConfig_i2s_ws_tag 4
#define meshtastic_ModuleConfig_AudioConfig_i2s_sd_tag 5
#define meshtastic_ModuleConfig_AudioConfig_i2s_din_tag 6
#define meshtastic_ModuleConfig_AudioConfig_i2s_sck_tag 7
#define meshtastic_ModuleConfig_PaxcounterConfig_enabled_tag 1
#define meshtastic_ModuleConfig_PaxcounterConfig_paxcounter_update_interval_tag 2
#define meshtastic_ModuleConfig_PaxcounterConfig_wifi_threshold_tag 3
#define meshtastic_ModuleConfig_PaxcounterConfig_ble_threshold_tag 4
#define meshtastic_ModuleConfig_SerialConfig_enabled_tag 1
#define meshtastic_ModuleConfig_SerialConfig_echo_tag 2
#define meshtastic_ModuleConfig_SerialConfig_rxd_tag 3
#define meshtastic_ModuleConfig_SerialConfig_txd_tag 4
#define meshtastic_ModuleConfig_SerialConfig_baud_tag 5
#define meshtastic_ModuleConfig_SerialConfig_timeout_tag 6
#define meshtastic_ModuleConfig_SerialConfig_mode_tag 7
#define meshtastic_ModuleConfig_SerialConfig_override_console_serial_port_tag 8
#define meshtastic_ModuleConfig_ExternalNotificationConfig_enabled_tag 1
#define meshtastic_ModuleConfig_ExternalNotificationConfig_output_ms_tag 2
#define meshtastic_ModuleConfig_ExternalNotificationConfig_output_tag 3
#define meshtastic_ModuleConfig_ExternalNotificationConfig_active_tag 4
#define meshtastic_ModuleConfig_ExternalNotificationConfig_alert_message_tag 5
#define meshtastic_ModuleConfig_ExternalNotificationConfig_alert_bell_tag 6
#define meshtastic_ModuleConfig_ExternalNotificationConfig_use_pwm_tag 7
#define meshtastic_ModuleConfig_ExternalNotificationConfig_output_vibra_tag 8
#define meshtastic_ModuleConfig_ExternalNotificationConfig_output_buzzer_tag 9
#define meshtastic_ModuleConfig_ExternalNotificationConfig_alert_message_vibra_tag 10
#define meshtastic_ModuleConfig_ExternalNotificationConfig_alert_message_buzzer_tag 11
#define meshtastic_ModuleConfig_ExternalNotificationConfig_alert_bell_vibra_tag 12
#define meshtastic_ModuleConfig_ExternalNotificationConfig_alert_bell_buzzer_tag 13
#define meshtastic_ModuleConfig_ExternalNotificationConfig_nag_timeout_tag 14
#define meshtastic_ModuleConfig_ExternalNotificationConfig_use_i2s_as_buzzer_tag 15
#define meshtastic_ModuleConfig_StoreForwardConfig_enabled_tag 1
#define meshtastic_ModuleConfig_StoreForwardConfig_heartbeat_tag 2
#define meshtastic_ModuleConfig_StoreForwardConfig_records_tag 3
#define meshtastic_ModuleConfig_StoreForwardConfig_history_return_max_tag 4
#define meshtastic_ModuleConfig_StoreForwardConfig_history_return_window_tag 5
#define meshtastic_ModuleConfig_StoreForwardConfig_is_server_tag 6
#define meshtastic_ModuleConfig_StoreForwardConfig_emit_control_signals_tag 7
#define meshtastic_ModuleConfig_RangeTestConfig_enabled_tag 1
#define meshtastic_ModuleConfig_RangeTestConfig_sender_tag 2
#define meshtastic_ModuleConfig_RangeTestConfig_save_tag 3
#define meshtastic_ModuleConfig_RangeTestConfig_clear_on_reboot_tag 4
#define meshtastic_ModuleConfig_TelemetryConfig_device_update_interval_tag 1
#define meshtastic_ModuleConfig_TelemetryConfig_environment_update_interval_tag 2
#define meshtastic_ModuleConfig_TelemetryConfig_environment_measurement_enabled_tag 3
#define meshtastic_ModuleConfig_TelemetryConfig_environment_screen_enabled_tag 4
#define meshtastic_ModuleConfig_TelemetryConfig_environment_display_fahrenheit_tag 5
#define meshtastic_ModuleConfig_TelemetryConfig_air_quality_enabled_tag 6
#define meshtastic_ModuleConfig_TelemetryConfig_air_quality_interval_tag 7
#define meshtastic_ModuleConfig_TelemetryConfig_power_measurement_enabled_tag 8
#define meshtastic_ModuleConfig_TelemetryConfig_power_update_interval_tag 9
#define meshtastic_ModuleConfig_TelemetryConfig_power_screen_enabled_tag 10
#define meshtastic_ModuleConfig_TelemetryConfig_health_measurement_enabled_tag 11
#define meshtastic_ModuleConfig_TelemetryConfig_health_update_interval_tag 12
#define meshtastic_ModuleConfig_TelemetryConfig_health_screen_enabled_tag 13
#define meshtastic_ModuleConfig_TelemetryConfig_device_telemetry_enabled_tag 14
#define meshtastic_ModuleConfig_CannedMessageConfig_rotary1_enabled_tag 1
#define meshtastic_ModuleConfig_CannedMessageConfig_inputbroker_pin_a_tag 2
#define meshtastic_ModuleConfig_CannedMessageConfig_inputbroker_pin_b_tag 3
#define meshtastic_ModuleConfig_CannedMessageConfig_inputbroker_pin_press_tag 4
#define meshtastic_ModuleConfig_CannedMessageConfig_inputbroker_event_cw_tag 5
#define meshtastic_ModuleConfig_CannedMessageConfig_inputbroker_event_ccw_tag 6
#define meshtastic_ModuleConfig_CannedMessageConfig_inputbroker_event_press_tag 7
#define meshtastic_ModuleConfig_CannedMessageConfig_updown1_enabled_tag 8
#define meshtastic_ModuleConfig_CannedMessageConfig_enabled_tag 9
#define meshtastic_ModuleConfig_CannedMessageConfig_allow_input_source_tag 10
#define meshtastic_ModuleConfig_CannedMessageConfig_send_bell_tag 11
#define meshtastic_ModuleConfig_AmbientLightingConfig_led_state_tag 1
#define meshtastic_ModuleConfig_AmbientLightingConfig_current_tag 2
#define meshtastic_ModuleConfig_AmbientLightingConfig_red_tag 3
#define meshtastic_ModuleConfig_AmbientLightingConfig_green_tag 4
#define meshtastic_ModuleConfig_AmbientLightingConfig_blue_tag 5
#define meshtastic_ModuleConfig_NodeModConfig_text_status_tag 1
#define meshtastic_ModuleConfig_NodeModConfig_emoji_tag 2
#define meshtastic_ModuleConfig_NodeModAdminConfig_sniffer_enabled_tag 1
#define meshtastic_ModuleConfig_NodeModAdminConfig_do_not_send_prv_over_mqtt_tag 2
#define meshtastic_ModuleConfig_NodeModAdminConfig_local_stats_over_mesh_enabled_tag 3
#define meshtastic_ModuleConfig_NodeModAdminConfig_local_stats_extended_over_mesh_enabled_tag 4
#define meshtastic_ModuleConfig_NodeModAdminConfig_idlegame_enabled_tag 5
#define meshtastic_ModuleConfig_NodeModAdminConfig_additional_chutil_tag 6
#define meshtastic_ModuleConfig_NodeModAdminConfig_additional_txutil_tag 7
#define meshtastic_ModuleConfig_NodeModAdminConfig_additional_polite_channel_percent_tag 8
#define meshtastic_ModuleConfig_NodeModAdminConfig_additional_polite_duty_cycle_percent_tag 9
#define meshtastic_ModuleConfig_NodeModAdminConfig_current_tx_util_limit_tag 10
#define meshtastic_ModuleConfig_NodeModAdminConfig_current_max_channel_util_percent_tag 11
#define meshtastic_ModuleConfig_NodeModAdminConfig_current_polite_channel_util_percent_tag 12
#define meshtastic_ModuleConfig_NodeModAdminConfig_current_polite_duty_cycle_percent_tag 13
#define meshtastic_ModuleConfig_NodeModAdminConfig_auto_responder_enabled_tag 14
#define meshtastic_ModuleConfig_NodeModAdminConfig_auto_responder_text_tag 15
#define meshtastic_ModuleConfig_NodeModAdminConfig_auto_redirect_messages_tag 16
#define meshtastic_ModuleConfig_NodeModAdminConfig_auto_redirect_target_node_id_tag 17
#define meshtastic_ModuleConfig_NodeModAdminConfig_telemetry_limiter_enabled_tag 18
#define meshtastic_ModuleConfig_NodeModAdminConfig_telemetry_limiter_packets_per_minute_tag 19
#define meshtastic_ModuleConfig_NodeModAdminConfig_telemetry_limiter_auto_chanutil_enabled_tag 20
#define meshtastic_ModuleConfig_NodeModAdminConfig_telemetry_limiter_auto_chanutil_threshold_tag 21
#define meshtastic_ModuleConfig_NodeModAdminConfig_position_limiter_enabled_tag 22
#define meshtastic_ModuleConfig_NodeModAdminConfig_position_limiter_time_minutes_threshold_tag 23
#define meshtastic_ModuleConfig_NodeModAdminConfig_opportunistic_flooding_enabled_tag 24
#define meshtastic_ModuleConfig_NodeModAdminConfig_opportunistic_base_delay_ms_tag 25
#define meshtastic_ModuleConfig_NodeModAdminConfig_opportunistic_hop_delay_ms_tag 26
#define meshtastic_ModuleConfig_NodeModAdminConfig_opportunistic_snr_gain_ms_tag 27
#define meshtastic_ModuleConfig_NodeModAdminConfig_opportunistic_jitter_ms_tag 28
#define meshtastic_ModuleConfig_NodeModAdminConfig_opportunistic_cancel_on_first_hear_tag 29
#define meshtastic_ModuleConfig_NodeModAdminConfig_opportunistic_auto_tag 30
#define meshtastic_ModuleConfig_NodeModAdminConfig_proactive_traceroute_enabled_tag 31
#define meshtastic_ModuleConfig_NodeModAdminConfig_traceroute_stale_ratio_threshold_percent_tag 32
#define meshtastic_ModuleConfig_NodeModAdminConfig_traceroute_global_cooldown_hours_tag 33
#define meshtastic_ModuleConfig_NodeModAdminConfig_traceroute_per_dest_cooldown_hours_tag 34
#define meshtastic_ModuleConfig_NodeModAdminConfig_traceroute_chanutil_threshold_percent_tag 35
#define meshtastic_ModuleConfig_NodeModAdminConfig_traceroute_max_per_day_tag 36
#define meshtastic_ModuleConfig_NodeModAdminConfig_traceroute_expanding_ring_initial_hop_tag 37
#define meshtastic_ModuleConfig_NodeModAdminConfig_traceroute_expanding_ring_max_hops_tag 38
#define meshtastic_ModuleConfig_NodeModAdminConfig_traceroute_probe_jitter_ms_tag 39
#define meshtastic_ModuleConfig_NodeModAdminConfig_route_ttl_base_hours_tag 40
#define meshtastic_ModuleConfig_NodeModAdminConfig_route_ttl_per_conf_hours_tag 41
#define meshtastic_ModuleConfig_NodeModAdminConfig_route_ttl_max_hours_tag 42
#define meshtastic_ModuleConfig_NodeModAdminConfig_min_confidence_to_use_tag 43
#define meshtastic_ModuleConfig_NodeModAdminConfig_hysteresis_cost_threshold_tenths_tag 44
#define meshtastic_ModuleConfig_NodeModAdminConfig_force_disable_https_tag 45
#define meshtastic_ModuleConfig_DtnOverlayConfig_enabled_tag 1
#define meshtastic_ModuleConfig_DtnOverlayConfig_ttl_minutes_tag 2
#define meshtastic_ModuleConfig_DtnOverlayConfig_initial_delay_base_ms_tag 3
#define meshtastic_ModuleConfig_DtnOverlayConfig_retry_backoff_ms_tag 4
#define meshtastic_ModuleConfig_DtnOverlayConfig_max_tries_tag 5
#define meshtastic_ModuleConfig_DtnOverlayConfig_late_fallback_enabled_tag 6
#define meshtastic_ModuleConfig_DtnOverlayConfig_fallback_tail_percent_tag 7
#define meshtastic_ModuleConfig_DtnOverlayConfig_milestones_enabled_tag 8
#define meshtastic_ModuleConfig_DtnOverlayConfig_per_dest_min_spacing_ms_tag 9
#define meshtastic_ModuleConfig_DtnOverlayConfig_max_active_dm_tag 10
#define meshtastic_ModuleConfig_DtnOverlayConfig_probe_fwplus_near_deadline_tag 11
#define meshtastic_ModuleConfig_BroadcastAssistConfig_enabled_tag 1
#define meshtastic_ModuleConfig_BroadcastAssistConfig_degree_threshold_tag 2
#define meshtastic_ModuleConfig_BroadcastAssistConfig_dup_threshold_tag 3
#define meshtastic_ModuleConfig_BroadcastAssistConfig_window_ms_tag 4
#define meshtastic_ModuleConfig_BroadcastAssistConfig_max_extra_hops_tag 5
#define meshtastic_ModuleConfig_BroadcastAssistConfig_jitter_ms_tag 6
#define meshtastic_ModuleConfig_BroadcastAssistConfig_airtime_guard_tag 7
#define meshtastic_ModuleConfig_BroadcastAssistConfig_allowed_ports_tag 8
#define meshtastic_ModuleConfig_IdleGameAlliance_node_id_tag 1
#define meshtastic_ModuleConfig_IdleGameAlliance_started_at_tag 2
#define meshtastic_ModuleConfig_IdleGameAlliance_morale_bonus_tag 3
#define meshtastic_ModuleConfig_IdleGamePatron_node_id_tag 1
#define meshtastic_ModuleConfig_IdleGamePatron_started_at_tag 2
#define meshtastic_ModuleConfig_IdleGameRelations_alliances_tag 1
#define meshtastic_ModuleConfig_IdleGameRelations_patrons_tag 2
#define meshtastic_ModuleConfig_IdleGameState_village_name_tag 1
#define meshtastic_ModuleConfig_IdleGameState_population_tag 2
#define meshtastic_ModuleConfig_IdleGameState_resources_tag 3
#define meshtastic_ModuleConfig_IdleGameState_defense_tag 4
#define meshtastic_ModuleConfig_IdleGameState_technology_tag 5
#define meshtastic_ModuleConfig_IdleGameState_node_id_tag 6
#define meshtastic_ModuleConfig_IdleGameState_level_tag 7
#define meshtastic_ModuleConfig_IdleGameState_version_tag 8
#define meshtastic_ModuleConfig_IdleGameKnownVillages_known_tag 1
#define meshtastic_ModuleConfig_IdleGameAction_action_type_tag 1
#define meshtastic_ModuleConfig_IdleGameAction_from_node_id_village_tag 2
#define meshtastic_ModuleConfig_IdleGameAction_to_node_id_village_tag 3
#define meshtastic_ModuleConfig_IdleGameAction_quantity_tag 4
#define meshtastic_ModuleConfig_IdleGameConfig_state_tag 1
#define meshtastic_ModuleConfig_IdleGameConfig_action_tag 2
#define meshtastic_ModuleConfig_IdleGameConfig_known_villages_tag 3
#define meshtastic_ModuleConfig_IdleGameConfig_relations_tag 4
#define meshtastic_RemoteHardwarePin_gpio_pin_tag 1
#define meshtastic_RemoteHardwarePin_name_tag    2
#define meshtastic_RemoteHardwarePin_type_tag    3
#define meshtastic_ModuleConfig_RemoteHardwareConfig_enabled_tag 1
#define meshtastic_ModuleConfig_RemoteHardwareConfig_allow_undefined_pin_access_tag 2
#define meshtastic_ModuleConfig_RemoteHardwareConfig_available_pins_tag 3
#define meshtastic_ModuleConfig_mqtt_tag         1
#define meshtastic_ModuleConfig_serial_tag       2
#define meshtastic_ModuleConfig_external_notification_tag 3
#define meshtastic_ModuleConfig_store_forward_tag 4
#define meshtastic_ModuleConfig_range_test_tag   5
#define meshtastic_ModuleConfig_telemetry_tag    6
#define meshtastic_ModuleConfig_canned_message_tag 7
#define meshtastic_ModuleConfig_audio_tag        8
#define meshtastic_ModuleConfig_remote_hardware_tag 9
#define meshtastic_ModuleConfig_neighbor_info_tag 10
#define meshtastic_ModuleConfig_ambient_lighting_tag 11
#define meshtastic_ModuleConfig_detection_sensor_tag 12
#define meshtastic_ModuleConfig_paxcounter_tag   13
#define meshtastic_ModuleConfig_node_mod_tag     20
#define meshtastic_ModuleConfig_node_mod_admin_tag 21
#define meshtastic_ModuleConfig_idle_game_tag    22
#define meshtastic_ModuleConfig_dtn_overlay_tag  23
#define meshtastic_ModuleConfig_broadcast_assist_tag 24

/* Struct field encoding specification for nanopb */
#define meshtastic_ModuleConfig_FIELDLIST(X, a) \
X(a, STATIC,   ONEOF,    MESSAGE,  (payload_variant,mqtt,payload_variant.mqtt),   1) \
X(a, STATIC,   ONEOF,    MESSAGE,  (payload_variant,serial,payload_variant.serial),   2) \
X(a, STATIC,   ONEOF,    MESSAGE,  (payload_variant,external_notification,payload_variant.external_notification),   3) \
X(a, STATIC,   ONEOF,    MESSAGE,  (payload_variant,store_forward,payload_variant.store_forward),   4) \
X(a, STATIC,   ONEOF,    MESSAGE,  (payload_variant,range_test,payload_variant.range_test),   5) \
X(a, STATIC,   ONEOF,    MESSAGE,  (payload_variant,telemetry,payload_variant.telemetry),   6) \
X(a, STATIC,   ONEOF,    MESSAGE,  (payload_variant,canned_message,payload_variant.canned_message),   7) \
X(a, STATIC,   ONEOF,    MESSAGE,  (payload_variant,audio,payload_variant.audio),   8) \
X(a, STATIC,   ONEOF,    MESSAGE,  (payload_variant,remote_hardware,payload_variant.remote_hardware),   9) \
X(a, STATIC,   ONEOF,    MESSAGE,  (payload_variant,neighbor_info,payload_variant.neighbor_info),  10) \
X(a, STATIC,   ONEOF,    MESSAGE,  (payload_variant,ambient_lighting,payload_variant.ambient_lighting),  11) \
X(a, STATIC,   ONEOF,    MESSAGE,  (payload_variant,detection_sensor,payload_variant.detection_sensor),  12) \
X(a, STATIC,   ONEOF,    MESSAGE,  (payload_variant,paxcounter,payload_variant.paxcounter),  13) \
X(a, STATIC,   ONEOF,    MESSAGE,  (payload_variant,node_mod,payload_variant.node_mod),  20) \
X(a, STATIC,   ONEOF,    MESSAGE,  (payload_variant,node_mod_admin,payload_variant.node_mod_admin),  21) \
X(a, STATIC,   ONEOF,    MESSAGE,  (payload_variant,idle_game,payload_variant.idle_game),  22) \
X(a, STATIC,   ONEOF,    MESSAGE,  (payload_variant,dtn_overlay,payload_variant.dtn_overlay),  23) \
X(a, STATIC,   ONEOF,    MESSAGE,  (payload_variant,broadcast_assist,payload_variant.broadcast_assist),  24)
#define meshtastic_ModuleConfig_CALLBACK NULL
#define meshtastic_ModuleConfig_DEFAULT NULL
#define meshtastic_ModuleConfig_payload_variant_mqtt_MSGTYPE meshtastic_ModuleConfig_MQTTConfig
#define meshtastic_ModuleConfig_payload_variant_serial_MSGTYPE meshtastic_ModuleConfig_SerialConfig
#define meshtastic_ModuleConfig_payload_variant_external_notification_MSGTYPE meshtastic_ModuleConfig_ExternalNotificationConfig
#define meshtastic_ModuleConfig_payload_variant_store_forward_MSGTYPE meshtastic_ModuleConfig_StoreForwardConfig
#define meshtastic_ModuleConfig_payload_variant_range_test_MSGTYPE meshtastic_ModuleConfig_RangeTestConfig
#define meshtastic_ModuleConfig_payload_variant_telemetry_MSGTYPE meshtastic_ModuleConfig_TelemetryConfig
#define meshtastic_ModuleConfig_payload_variant_canned_message_MSGTYPE meshtastic_ModuleConfig_CannedMessageConfig
#define meshtastic_ModuleConfig_payload_variant_audio_MSGTYPE meshtastic_ModuleConfig_AudioConfig
#define meshtastic_ModuleConfig_payload_variant_remote_hardware_MSGTYPE meshtastic_ModuleConfig_RemoteHardwareConfig
#define meshtastic_ModuleConfig_payload_variant_neighbor_info_MSGTYPE meshtastic_ModuleConfig_NeighborInfoConfig
#define meshtastic_ModuleConfig_payload_variant_ambient_lighting_MSGTYPE meshtastic_ModuleConfig_AmbientLightingConfig
#define meshtastic_ModuleConfig_payload_variant_detection_sensor_MSGTYPE meshtastic_ModuleConfig_DetectionSensorConfig
#define meshtastic_ModuleConfig_payload_variant_paxcounter_MSGTYPE meshtastic_ModuleConfig_PaxcounterConfig
#define meshtastic_ModuleConfig_payload_variant_node_mod_MSGTYPE meshtastic_ModuleConfig_NodeModConfig
#define meshtastic_ModuleConfig_payload_variant_node_mod_admin_MSGTYPE meshtastic_ModuleConfig_NodeModAdminConfig
#define meshtastic_ModuleConfig_payload_variant_idle_game_MSGTYPE meshtastic_ModuleConfig_IdleGameConfig
#define meshtastic_ModuleConfig_payload_variant_dtn_overlay_MSGTYPE meshtastic_ModuleConfig_DtnOverlayConfig
#define meshtastic_ModuleConfig_payload_variant_broadcast_assist_MSGTYPE meshtastic_ModuleConfig_BroadcastAssistConfig

#define meshtastic_ModuleConfig_MQTTConfig_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, BOOL,     enabled,           1) \
X(a, STATIC,   SINGULAR, STRING,   address,           2) \
X(a, STATIC,   SINGULAR, STRING,   username,          3) \
X(a, STATIC,   SINGULAR, STRING,   password,          4) \
X(a, STATIC,   SINGULAR, BOOL,     encryption_enabled,   5) \
X(a, STATIC,   SINGULAR, BOOL,     json_enabled,      6) \
X(a, STATIC,   SINGULAR, BOOL,     tls_enabled,       7) \
X(a, STATIC,   SINGULAR, STRING,   root,              8) \
X(a, STATIC,   SINGULAR, BOOL,     proxy_to_client_enabled,   9) \
X(a, STATIC,   SINGULAR, BOOL,     map_reporting_enabled,  10) \
X(a, STATIC,   OPTIONAL, MESSAGE,  map_report_settings,  11)
#define meshtastic_ModuleConfig_MQTTConfig_CALLBACK NULL
#define meshtastic_ModuleConfig_MQTTConfig_DEFAULT NULL
#define meshtastic_ModuleConfig_MQTTConfig_map_report_settings_MSGTYPE meshtastic_ModuleConfig_MapReportSettings

#define meshtastic_ModuleConfig_MapReportSettings_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   publish_interval_secs,   1) \
X(a, STATIC,   SINGULAR, UINT32,   position_precision,   2) \
X(a, STATIC,   SINGULAR, BOOL,     should_report_location,   3)
#define meshtastic_ModuleConfig_MapReportSettings_CALLBACK NULL
#define meshtastic_ModuleConfig_MapReportSettings_DEFAULT NULL

#define meshtastic_ModuleConfig_RemoteHardwareConfig_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, BOOL,     enabled,           1) \
X(a, STATIC,   SINGULAR, BOOL,     allow_undefined_pin_access,   2) \
X(a, STATIC,   REPEATED, MESSAGE,  available_pins,    3)
#define meshtastic_ModuleConfig_RemoteHardwareConfig_CALLBACK NULL
#define meshtastic_ModuleConfig_RemoteHardwareConfig_DEFAULT NULL
#define meshtastic_ModuleConfig_RemoteHardwareConfig_available_pins_MSGTYPE meshtastic_RemoteHardwarePin

#define meshtastic_ModuleConfig_NeighborInfoConfig_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, BOOL,     enabled,           1) \
X(a, STATIC,   SINGULAR, UINT32,   update_interval,   2) \
X(a, STATIC,   SINGULAR, BOOL,     transmit_over_lora,   3)
#define meshtastic_ModuleConfig_NeighborInfoConfig_CALLBACK NULL
#define meshtastic_ModuleConfig_NeighborInfoConfig_DEFAULT NULL

#define meshtastic_ModuleConfig_DetectionSensorConfig_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, BOOL,     enabled,           1) \
X(a, STATIC,   SINGULAR, UINT32,   minimum_broadcast_secs,   2) \
X(a, STATIC,   SINGULAR, UINT32,   state_broadcast_secs,   3) \
X(a, STATIC,   SINGULAR, BOOL,     send_bell,         4) \
X(a, STATIC,   SINGULAR, STRING,   name,              5) \
X(a, STATIC,   SINGULAR, UINT32,   monitor_pin,       6) \
X(a, STATIC,   SINGULAR, UENUM,    detection_trigger_type,   7) \
X(a, STATIC,   SINGULAR, BOOL,     use_pullup,        8)
#define meshtastic_ModuleConfig_DetectionSensorConfig_CALLBACK NULL
#define meshtastic_ModuleConfig_DetectionSensorConfig_DEFAULT NULL

#define meshtastic_ModuleConfig_AudioConfig_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, BOOL,     codec2_enabled,    1) \
X(a, STATIC,   SINGULAR, UINT32,   ptt_pin,           2) \
X(a, STATIC,   SINGULAR, UENUM,    bitrate,           3) \
X(a, STATIC,   SINGULAR, UINT32,   i2s_ws,            4) \
X(a, STATIC,   SINGULAR, UINT32,   i2s_sd,            5) \
X(a, STATIC,   SINGULAR, UINT32,   i2s_din,           6) \
X(a, STATIC,   SINGULAR, UINT32,   i2s_sck,           7)
#define meshtastic_ModuleConfig_AudioConfig_CALLBACK NULL
#define meshtastic_ModuleConfig_AudioConfig_DEFAULT NULL

#define meshtastic_ModuleConfig_PaxcounterConfig_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, BOOL,     enabled,           1) \
X(a, STATIC,   SINGULAR, UINT32,   paxcounter_update_interval,   2) \
X(a, STATIC,   SINGULAR, INT32,    wifi_threshold,    3) \
X(a, STATIC,   SINGULAR, INT32,    ble_threshold,     4)
#define meshtastic_ModuleConfig_PaxcounterConfig_CALLBACK NULL
#define meshtastic_ModuleConfig_PaxcounterConfig_DEFAULT NULL

#define meshtastic_ModuleConfig_SerialConfig_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, BOOL,     enabled,           1) \
X(a, STATIC,   SINGULAR, BOOL,     echo,              2) \
X(a, STATIC,   SINGULAR, UINT32,   rxd,               3) \
X(a, STATIC,   SINGULAR, UINT32,   txd,               4) \
X(a, STATIC,   SINGULAR, UENUM,    baud,              5) \
X(a, STATIC,   SINGULAR, UINT32,   timeout,           6) \
X(a, STATIC,   SINGULAR, UENUM,    mode,              7) \
X(a, STATIC,   SINGULAR, BOOL,     override_console_serial_port,   8)
#define meshtastic_ModuleConfig_SerialConfig_CALLBACK NULL
#define meshtastic_ModuleConfig_SerialConfig_DEFAULT NULL

#define meshtastic_ModuleConfig_ExternalNotificationConfig_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, BOOL,     enabled,           1) \
X(a, STATIC,   SINGULAR, UINT32,   output_ms,         2) \
X(a, STATIC,   SINGULAR, UINT32,   output,            3) \
X(a, STATIC,   SINGULAR, BOOL,     active,            4) \
X(a, STATIC,   SINGULAR, BOOL,     alert_message,     5) \
X(a, STATIC,   SINGULAR, BOOL,     alert_bell,        6) \
X(a, STATIC,   SINGULAR, BOOL,     use_pwm,           7) \
X(a, STATIC,   SINGULAR, UINT32,   output_vibra,      8) \
X(a, STATIC,   SINGULAR, UINT32,   output_buzzer,     9) \
X(a, STATIC,   SINGULAR, BOOL,     alert_message_vibra,  10) \
X(a, STATIC,   SINGULAR, BOOL,     alert_message_buzzer,  11) \
X(a, STATIC,   SINGULAR, BOOL,     alert_bell_vibra,  12) \
X(a, STATIC,   SINGULAR, BOOL,     alert_bell_buzzer,  13) \
X(a, STATIC,   SINGULAR, UINT32,   nag_timeout,      14) \
X(a, STATIC,   SINGULAR, BOOL,     use_i2s_as_buzzer,  15)
#define meshtastic_ModuleConfig_ExternalNotificationConfig_CALLBACK NULL
#define meshtastic_ModuleConfig_ExternalNotificationConfig_DEFAULT NULL

#define meshtastic_ModuleConfig_StoreForwardConfig_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, BOOL,     enabled,           1) \
X(a, STATIC,   SINGULAR, BOOL,     heartbeat,         2) \
X(a, STATIC,   SINGULAR, UINT32,   records,           3) \
X(a, STATIC,   SINGULAR, UINT32,   history_return_max,   4) \
X(a, STATIC,   SINGULAR, UINT32,   history_return_window,   5) \
X(a, STATIC,   SINGULAR, BOOL,     is_server,         6) \
X(a, STATIC,   SINGULAR, BOOL,     emit_control_signals,   7)
#define meshtastic_ModuleConfig_StoreForwardConfig_CALLBACK NULL
#define meshtastic_ModuleConfig_StoreForwardConfig_DEFAULT NULL

#define meshtastic_ModuleConfig_RangeTestConfig_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, BOOL,     enabled,           1) \
X(a, STATIC,   SINGULAR, UINT32,   sender,            2) \
X(a, STATIC,   SINGULAR, BOOL,     save,              3) \
X(a, STATIC,   SINGULAR, BOOL,     clear_on_reboot,   4)
#define meshtastic_ModuleConfig_RangeTestConfig_CALLBACK NULL
#define meshtastic_ModuleConfig_RangeTestConfig_DEFAULT NULL

#define meshtastic_ModuleConfig_TelemetryConfig_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   device_update_interval,   1) \
X(a, STATIC,   SINGULAR, UINT32,   environment_update_interval,   2) \
X(a, STATIC,   SINGULAR, BOOL,     environment_measurement_enabled,   3) \
X(a, STATIC,   SINGULAR, BOOL,     environment_screen_enabled,   4) \
X(a, STATIC,   SINGULAR, BOOL,     environment_display_fahrenheit,   5) \
X(a, STATIC,   SINGULAR, BOOL,     air_quality_enabled,   6) \
X(a, STATIC,   SINGULAR, UINT32,   air_quality_interval,   7) \
X(a, STATIC,   SINGULAR, BOOL,     power_measurement_enabled,   8) \
X(a, STATIC,   SINGULAR, UINT32,   power_update_interval,   9) \
X(a, STATIC,   SINGULAR, BOOL,     power_screen_enabled,  10) \
X(a, STATIC,   SINGULAR, BOOL,     health_measurement_enabled,  11) \
X(a, STATIC,   SINGULAR, UINT32,   health_update_interval,  12) \
X(a, STATIC,   SINGULAR, BOOL,     health_screen_enabled,  13) \
X(a, STATIC,   SINGULAR, BOOL,     device_telemetry_enabled,  14)
#define meshtastic_ModuleConfig_TelemetryConfig_CALLBACK NULL
#define meshtastic_ModuleConfig_TelemetryConfig_DEFAULT NULL

#define meshtastic_ModuleConfig_CannedMessageConfig_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, BOOL,     rotary1_enabled,   1) \
X(a, STATIC,   SINGULAR, UINT32,   inputbroker_pin_a,   2) \
X(a, STATIC,   SINGULAR, UINT32,   inputbroker_pin_b,   3) \
X(a, STATIC,   SINGULAR, UINT32,   inputbroker_pin_press,   4) \
X(a, STATIC,   SINGULAR, UENUM,    inputbroker_event_cw,   5) \
X(a, STATIC,   SINGULAR, UENUM,    inputbroker_event_ccw,   6) \
X(a, STATIC,   SINGULAR, UENUM,    inputbroker_event_press,   7) \
X(a, STATIC,   SINGULAR, BOOL,     updown1_enabled,   8) \
X(a, STATIC,   SINGULAR, BOOL,     enabled,           9) \
X(a, STATIC,   SINGULAR, STRING,   allow_input_source,  10) \
X(a, STATIC,   SINGULAR, BOOL,     send_bell,        11)
#define meshtastic_ModuleConfig_CannedMessageConfig_CALLBACK NULL
#define meshtastic_ModuleConfig_CannedMessageConfig_DEFAULT NULL

#define meshtastic_ModuleConfig_AmbientLightingConfig_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, BOOL,     led_state,         1) \
X(a, STATIC,   SINGULAR, UINT32,   current,           2) \
X(a, STATIC,   SINGULAR, UINT32,   red,               3) \
X(a, STATIC,   SINGULAR, UINT32,   green,             4) \
X(a, STATIC,   SINGULAR, UINT32,   blue,              5)
#define meshtastic_ModuleConfig_AmbientLightingConfig_CALLBACK NULL
#define meshtastic_ModuleConfig_AmbientLightingConfig_DEFAULT NULL

#define meshtastic_ModuleConfig_NodeModConfig_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, STRING,   text_status,       1) \
X(a, STATIC,   SINGULAR, STRING,   emoji,             2)
#define meshtastic_ModuleConfig_NodeModConfig_CALLBACK NULL
#define meshtastic_ModuleConfig_NodeModConfig_DEFAULT NULL

#define meshtastic_ModuleConfig_NodeModAdminConfig_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, BOOL,     sniffer_enabled,   1) \
X(a, STATIC,   SINGULAR, BOOL,     do_not_send_prv_over_mqtt,   2) \
X(a, STATIC,   SINGULAR, BOOL,     local_stats_over_mesh_enabled,   3) \
X(a, STATIC,   SINGULAR, BOOL,     local_stats_extended_over_mesh_enabled,   4) \
X(a, STATIC,   SINGULAR, BOOL,     idlegame_enabled,   5) \
X(a, STATIC,   SINGULAR, UINT32,   additional_chutil,   6) \
X(a, STATIC,   SINGULAR, FLOAT,    additional_txutil,   7) \
X(a, STATIC,   SINGULAR, UINT32,   additional_polite_channel_percent,   8) \
X(a, STATIC,   SINGULAR, UINT32,   additional_polite_duty_cycle_percent,   9) \
X(a, STATIC,   SINGULAR, FLOAT,    current_tx_util_limit,  10) \
X(a, STATIC,   SINGULAR, UINT32,   current_max_channel_util_percent,  11) \
X(a, STATIC,   SINGULAR, UINT32,   current_polite_channel_util_percent,  12) \
X(a, STATIC,   SINGULAR, UINT32,   current_polite_duty_cycle_percent,  13) \
X(a, STATIC,   SINGULAR, BOOL,     auto_responder_enabled,  14) \
X(a, STATIC,   SINGULAR, STRING,   auto_responder_text,  15) \
X(a, STATIC,   SINGULAR, BOOL,     auto_redirect_messages,  16) \
X(a, STATIC,   SINGULAR, UINT32,   auto_redirect_target_node_id,  17) \
X(a, STATIC,   SINGULAR, BOOL,     telemetry_limiter_enabled,  18) \
X(a, STATIC,   SINGULAR, UINT32,   telemetry_limiter_packets_per_minute,  19) \
X(a, STATIC,   SINGULAR, BOOL,     telemetry_limiter_auto_chanutil_enabled,  20) \
X(a, STATIC,   SINGULAR, UINT32,   telemetry_limiter_auto_chanutil_threshold,  21) \
X(a, STATIC,   SINGULAR, BOOL,     position_limiter_enabled,  22) \
X(a, STATIC,   SINGULAR, UINT32,   position_limiter_time_minutes_threshold,  23) \
X(a, STATIC,   SINGULAR, BOOL,     opportunistic_flooding_enabled,  24) \
X(a, STATIC,   SINGULAR, UINT32,   opportunistic_base_delay_ms,  25) \
X(a, STATIC,   SINGULAR, UINT32,   opportunistic_hop_delay_ms,  26) \
X(a, STATIC,   SINGULAR, UINT32,   opportunistic_snr_gain_ms,  27) \
X(a, STATIC,   SINGULAR, UINT32,   opportunistic_jitter_ms,  28) \
X(a, STATIC,   SINGULAR, BOOL,     opportunistic_cancel_on_first_hear,  29) \
X(a, STATIC,   SINGULAR, BOOL,     opportunistic_auto,  30) \
X(a, STATIC,   SINGULAR, BOOL,     proactive_traceroute_enabled,  31) \
X(a, STATIC,   SINGULAR, UINT32,   traceroute_stale_ratio_threshold_percent,  32) \
X(a, STATIC,   SINGULAR, UINT32,   traceroute_global_cooldown_hours,  33) \
X(a, STATIC,   SINGULAR, UINT32,   traceroute_per_dest_cooldown_hours,  34) \
X(a, STATIC,   SINGULAR, UINT32,   traceroute_chanutil_threshold_percent,  35) \
X(a, STATIC,   SINGULAR, UINT32,   traceroute_max_per_day,  36) \
X(a, STATIC,   SINGULAR, UINT32,   traceroute_expanding_ring_initial_hop,  37) \
X(a, STATIC,   SINGULAR, UINT32,   traceroute_expanding_ring_max_hops,  38) \
X(a, STATIC,   SINGULAR, UINT32,   traceroute_probe_jitter_ms,  39) \
X(a, STATIC,   SINGULAR, UINT32,   route_ttl_base_hours,  40) \
X(a, STATIC,   SINGULAR, UINT32,   route_ttl_per_conf_hours,  41) \
X(a, STATIC,   SINGULAR, UINT32,   route_ttl_max_hours,  42) \
X(a, STATIC,   SINGULAR, UINT32,   min_confidence_to_use,  43) \
X(a, STATIC,   SINGULAR, UINT32,   hysteresis_cost_threshold_tenths,  44) \
X(a, STATIC,   SINGULAR, BOOL,     force_disable_https,  45)
#define meshtastic_ModuleConfig_NodeModAdminConfig_CALLBACK NULL
#define meshtastic_ModuleConfig_NodeModAdminConfig_DEFAULT NULL

#define meshtastic_ModuleConfig_DtnOverlayConfig_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, BOOL,     enabled,           1) \
X(a, STATIC,   SINGULAR, UINT32,   ttl_minutes,       2) \
X(a, STATIC,   SINGULAR, UINT32,   initial_delay_base_ms,   3) \
X(a, STATIC,   SINGULAR, UINT32,   retry_backoff_ms,   4) \
X(a, STATIC,   SINGULAR, UINT32,   max_tries,         5) \
X(a, STATIC,   SINGULAR, BOOL,     late_fallback_enabled,   6) \
X(a, STATIC,   SINGULAR, UINT32,   fallback_tail_percent,   7) \
X(a, STATIC,   SINGULAR, BOOL,     milestones_enabled,   8) \
X(a, STATIC,   SINGULAR, UINT32,   per_dest_min_spacing_ms,   9) \
X(a, STATIC,   SINGULAR, UINT32,   max_active_dm,    10) \
X(a, STATIC,   SINGULAR, BOOL,     probe_fwplus_near_deadline,  11)
#define meshtastic_ModuleConfig_DtnOverlayConfig_CALLBACK NULL
#define meshtastic_ModuleConfig_DtnOverlayConfig_DEFAULT NULL

#define meshtastic_ModuleConfig_BroadcastAssistConfig_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, BOOL,     enabled,           1) \
X(a, STATIC,   SINGULAR, UINT32,   degree_threshold,   2) \
X(a, STATIC,   SINGULAR, UINT32,   dup_threshold,     3) \
X(a, STATIC,   SINGULAR, UINT32,   window_ms,         4) \
X(a, STATIC,   SINGULAR, UINT32,   max_extra_hops,    5) \
X(a, STATIC,   SINGULAR, UINT32,   jitter_ms,         6) \
X(a, STATIC,   SINGULAR, BOOL,     airtime_guard,     7) \
X(a, STATIC,   REPEATED, UINT32,   allowed_ports,     8)
#define meshtastic_ModuleConfig_BroadcastAssistConfig_CALLBACK NULL
#define meshtastic_ModuleConfig_BroadcastAssistConfig_DEFAULT NULL

#define meshtastic_ModuleConfig_IdleGameKnownVillages_FIELDLIST(X, a) \
X(a, STATIC,   REPEATED, MESSAGE,  known,             1)
#define meshtastic_ModuleConfig_IdleGameKnownVillages_CALLBACK NULL
#define meshtastic_ModuleConfig_IdleGameKnownVillages_DEFAULT NULL
#define meshtastic_ModuleConfig_IdleGameKnownVillages_known_MSGTYPE meshtastic_ModuleConfig_IdleGameState

#define meshtastic_ModuleConfig_IdleGameAlliance_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   node_id,           1) \
X(a, STATIC,   SINGULAR, UINT32,   started_at,        2) \
X(a, STATIC,   SINGULAR, BYTES,    morale_bonus,      3)
#define meshtastic_ModuleConfig_IdleGameAlliance_CALLBACK NULL
#define meshtastic_ModuleConfig_IdleGameAlliance_DEFAULT NULL

#define meshtastic_ModuleConfig_IdleGamePatron_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   node_id,           1) \
X(a, STATIC,   SINGULAR, UINT32,   started_at,        2)
#define meshtastic_ModuleConfig_IdleGamePatron_CALLBACK NULL
#define meshtastic_ModuleConfig_IdleGamePatron_DEFAULT NULL

#define meshtastic_ModuleConfig_IdleGameRelations_FIELDLIST(X, a) \
X(a, STATIC,   REPEATED, MESSAGE,  alliances,         1) \
X(a, STATIC,   REPEATED, MESSAGE,  patrons,           2)
#define meshtastic_ModuleConfig_IdleGameRelations_CALLBACK NULL
#define meshtastic_ModuleConfig_IdleGameRelations_DEFAULT NULL
#define meshtastic_ModuleConfig_IdleGameRelations_alliances_MSGTYPE meshtastic_ModuleConfig_IdleGameAlliance
#define meshtastic_ModuleConfig_IdleGameRelations_patrons_MSGTYPE meshtastic_ModuleConfig_IdleGamePatron

#define meshtastic_ModuleConfig_IdleGameState_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, STRING,   village_name,      1) \
X(a, STATIC,   SINGULAR, UINT32,   population,        2) \
X(a, STATIC,   SINGULAR, UINT32,   resources,         3) \
X(a, STATIC,   SINGULAR, UINT32,   defense,           4) \
X(a, STATIC,   SINGULAR, UINT32,   technology,        5) \
X(a, STATIC,   SINGULAR, UINT32,   node_id,           6) \
X(a, STATIC,   SINGULAR, UINT32,   level,             7) \
X(a, STATIC,   SINGULAR, UINT32,   version,           8)
#define meshtastic_ModuleConfig_IdleGameState_CALLBACK NULL
#define meshtastic_ModuleConfig_IdleGameState_DEFAULT NULL

#define meshtastic_ModuleConfig_IdleGameAction_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    action_type,       1) \
X(a, STATIC,   SINGULAR, UINT32,   from_node_id_village,   2) \
X(a, STATIC,   SINGULAR, UINT32,   to_node_id_village,   3) \
X(a, STATIC,   SINGULAR, UINT32,   quantity,          4)
#define meshtastic_ModuleConfig_IdleGameAction_CALLBACK NULL
#define meshtastic_ModuleConfig_IdleGameAction_DEFAULT NULL

#define meshtastic_ModuleConfig_IdleGameConfig_FIELDLIST(X, a) \
X(a, STATIC,   ONEOF,    MESSAGE,  (variant,state,variant.state),   1) \
X(a, STATIC,   ONEOF,    MESSAGE,  (variant,action,variant.action),   2) \
X(a, STATIC,   ONEOF,    MESSAGE,  (variant,known_villages,variant.known_villages),   3) \
X(a, STATIC,   ONEOF,    MESSAGE,  (variant,relations,variant.relations),   4)
#define meshtastic_ModuleConfig_IdleGameConfig_CALLBACK NULL
#define meshtastic_ModuleConfig_IdleGameConfig_DEFAULT NULL
#define meshtastic_ModuleConfig_IdleGameConfig_variant_state_MSGTYPE meshtastic_ModuleConfig_IdleGameState
#define meshtastic_ModuleConfig_IdleGameConfig_variant_action_MSGTYPE meshtastic_ModuleConfig_IdleGameAction
#define meshtastic_ModuleConfig_IdleGameConfig_variant_known_villages_MSGTYPE meshtastic_ModuleConfig_IdleGameKnownVillages
#define meshtastic_ModuleConfig_IdleGameConfig_variant_relations_MSGTYPE meshtastic_ModuleConfig_IdleGameRelations

#define meshtastic_RemoteHardwarePin_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   gpio_pin,          1) \
X(a, STATIC,   SINGULAR, STRING,   name,              2) \
X(a, STATIC,   SINGULAR, UENUM,    type,              3)
#define meshtastic_RemoteHardwarePin_CALLBACK NULL
#define meshtastic_RemoteHardwarePin_DEFAULT NULL

extern const pb_msgdesc_t meshtastic_ModuleConfig_msg;
extern const pb_msgdesc_t meshtastic_ModuleConfig_MQTTConfig_msg;
extern const pb_msgdesc_t meshtastic_ModuleConfig_MapReportSettings_msg;
extern const pb_msgdesc_t meshtastic_ModuleConfig_RemoteHardwareConfig_msg;
extern const pb_msgdesc_t meshtastic_ModuleConfig_NeighborInfoConfig_msg;
extern const pb_msgdesc_t meshtastic_ModuleConfig_DetectionSensorConfig_msg;
extern const pb_msgdesc_t meshtastic_ModuleConfig_AudioConfig_msg;
extern const pb_msgdesc_t meshtastic_ModuleConfig_PaxcounterConfig_msg;
extern const pb_msgdesc_t meshtastic_ModuleConfig_SerialConfig_msg;
extern const pb_msgdesc_t meshtastic_ModuleConfig_ExternalNotificationConfig_msg;
extern const pb_msgdesc_t meshtastic_ModuleConfig_StoreForwardConfig_msg;
extern const pb_msgdesc_t meshtastic_ModuleConfig_RangeTestConfig_msg;
extern const pb_msgdesc_t meshtastic_ModuleConfig_TelemetryConfig_msg;
extern const pb_msgdesc_t meshtastic_ModuleConfig_CannedMessageConfig_msg;
extern const pb_msgdesc_t meshtastic_ModuleConfig_AmbientLightingConfig_msg;
extern const pb_msgdesc_t meshtastic_ModuleConfig_NodeModConfig_msg;
extern const pb_msgdesc_t meshtastic_ModuleConfig_NodeModAdminConfig_msg;
extern const pb_msgdesc_t meshtastic_ModuleConfig_DtnOverlayConfig_msg;
extern const pb_msgdesc_t meshtastic_ModuleConfig_BroadcastAssistConfig_msg;
extern const pb_msgdesc_t meshtastic_ModuleConfig_IdleGameKnownVillages_msg;
extern const pb_msgdesc_t meshtastic_ModuleConfig_IdleGameAlliance_msg;
extern const pb_msgdesc_t meshtastic_ModuleConfig_IdleGamePatron_msg;
extern const pb_msgdesc_t meshtastic_ModuleConfig_IdleGameRelations_msg;
extern const pb_msgdesc_t meshtastic_ModuleConfig_IdleGameState_msg;
extern const pb_msgdesc_t meshtastic_ModuleConfig_IdleGameAction_msg;
extern const pb_msgdesc_t meshtastic_ModuleConfig_IdleGameConfig_msg;
extern const pb_msgdesc_t meshtastic_RemoteHardwarePin_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define meshtastic_ModuleConfig_fields &meshtastic_ModuleConfig_msg
#define meshtastic_ModuleConfig_MQTTConfig_fields &meshtastic_ModuleConfig_MQTTConfig_msg
#define meshtastic_ModuleConfig_MapReportSettings_fields &meshtastic_ModuleConfig_MapReportSettings_msg
#define meshtastic_ModuleConfig_RemoteHardwareConfig_fields &meshtastic_ModuleConfig_RemoteHardwareConfig_msg
#define meshtastic_ModuleConfig_NeighborInfoConfig_fields &meshtastic_ModuleConfig_NeighborInfoConfig_msg
#define meshtastic_ModuleConfig_DetectionSensorConfig_fields &meshtastic_ModuleConfig_DetectionSensorConfig_msg
#define meshtastic_ModuleConfig_AudioConfig_fields &meshtastic_ModuleConfig_AudioConfig_msg
#define meshtastic_ModuleConfig_PaxcounterConfig_fields &meshtastic_ModuleConfig_PaxcounterConfig_msg
#define meshtastic_ModuleConfig_SerialConfig_fields &meshtastic_ModuleConfig_SerialConfig_msg
#define meshtastic_ModuleConfig_ExternalNotificationConfig_fields &meshtastic_ModuleConfig_ExternalNotificationConfig_msg
#define meshtastic_ModuleConfig_StoreForwardConfig_fields &meshtastic_ModuleConfig_StoreForwardConfig_msg
#define meshtastic_ModuleConfig_RangeTestConfig_fields &meshtastic_ModuleConfig_RangeTestConfig_msg
#define meshtastic_ModuleConfig_TelemetryConfig_fields &meshtastic_ModuleConfig_TelemetryConfig_msg
#define meshtastic_ModuleConfig_CannedMessageConfig_fields &meshtastic_ModuleConfig_CannedMessageConfig_msg
#define meshtastic_ModuleConfig_AmbientLightingConfig_fields &meshtastic_ModuleConfig_AmbientLightingConfig_msg
#define meshtastic_ModuleConfig_NodeModConfig_fields &meshtastic_ModuleConfig_NodeModConfig_msg
#define meshtastic_ModuleConfig_NodeModAdminConfig_fields &meshtastic_ModuleConfig_NodeModAdminConfig_msg
#define meshtastic_ModuleConfig_DtnOverlayConfig_fields &meshtastic_ModuleConfig_DtnOverlayConfig_msg
#define meshtastic_ModuleConfig_BroadcastAssistConfig_fields &meshtastic_ModuleConfig_BroadcastAssistConfig_msg
#define meshtastic_ModuleConfig_IdleGameKnownVillages_fields &meshtastic_ModuleConfig_IdleGameKnownVillages_msg
#define meshtastic_ModuleConfig_IdleGameAlliance_fields &meshtastic_ModuleConfig_IdleGameAlliance_msg
#define meshtastic_ModuleConfig_IdleGamePatron_fields &meshtastic_ModuleConfig_IdleGamePatron_msg
#define meshtastic_ModuleConfig_IdleGameRelations_fields &meshtastic_ModuleConfig_IdleGameRelations_msg
#define meshtastic_ModuleConfig_IdleGameState_fields &meshtastic_ModuleConfig_IdleGameState_msg
#define meshtastic_ModuleConfig_IdleGameAction_fields &meshtastic_ModuleConfig_IdleGameAction_msg
#define meshtastic_ModuleConfig_IdleGameConfig_fields &meshtastic_ModuleConfig_IdleGameConfig_msg
#define meshtastic_RemoteHardwarePin_fields &meshtastic_RemoteHardwarePin_msg

/* Maximum encoded size of messages (where known) */
#define MESHTASTIC_MESHTASTIC_MODULE_CONFIG_PB_H_MAX_SIZE meshtastic_ModuleConfig_size
#define meshtastic_ModuleConfig_AmbientLightingConfig_size 14
#define meshtastic_ModuleConfig_AudioConfig_size 19
#define meshtastic_ModuleConfig_BroadcastAssistConfig_size 69
#define meshtastic_ModuleConfig_CannedMessageConfig_size 49
#define meshtastic_ModuleConfig_DetectionSensorConfig_size 44
#define meshtastic_ModuleConfig_DtnOverlayConfig_size 37
#define meshtastic_ModuleConfig_ExternalNotificationConfig_size 42
#define meshtastic_ModuleConfig_IdleGameAction_size 11
#define meshtastic_ModuleConfig_IdleGameAlliance_size 9
#define meshtastic_ModuleConfig_IdleGameConfig_size 483
#define meshtastic_ModuleConfig_IdleGameKnownVillages_size 480
#define meshtastic_ModuleConfig_IdleGamePatron_size 6
#define meshtastic_ModuleConfig_IdleGameRelations_size 76
#define meshtastic_ModuleConfig_IdleGameState_size 46
#define meshtastic_ModuleConfig_MQTTConfig_size  224
#define meshtastic_ModuleConfig_MapReportSettings_size 14
#define meshtastic_ModuleConfig_NeighborInfoConfig_size 10
#define meshtastic_ModuleConfig_NodeModAdminConfig_size 269
#define meshtastic_ModuleConfig_NodeModConfig_size 207
#define meshtastic_ModuleConfig_PaxcounterConfig_size 30
#define meshtastic_ModuleConfig_RangeTestConfig_size 12
#define meshtastic_ModuleConfig_RemoteHardwareConfig_size 96
#define meshtastic_ModuleConfig_SerialConfig_size 28
#define meshtastic_ModuleConfig_StoreForwardConfig_size 26
#define meshtastic_ModuleConfig_TelemetryConfig_size 48
#define meshtastic_ModuleConfig_size             487
#define meshtastic_RemoteHardwarePin_size        21

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
