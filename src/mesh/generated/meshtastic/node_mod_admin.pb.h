/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.9 */

#ifndef PB_MESHTASTIC_MESHTASTIC_NODE_MOD_ADMIN_PB_H_INCLUDED
#define PB_MESHTASTIC_MESHTASTIC_NODE_MOD_ADMIN_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Struct definitions */
typedef struct _meshtastic_NodeModAdmin {
    /* sniffer enabled */
    bool sniffer_enabled;
    /* do not send prv over mqtt */
    bool do_not_send_prv_over_mqtt;
    /* local stats over mesh enabled */
    bool local_stats_over_mesh_enabled;
    /* local stats extended over mesh enabled */
    bool local_stats_extended_over_mesh_enabled;
    /* idlegame enabled */
    bool idlegame_enabled;
    /* base ch util + additional chan utilization defined by user */
    uint8_t additional_chutil;
    /* base tx util + additional tx chan utilization defined by user */
    float additional_txutil;
    /* additional chutil polite percent defined by user */
    uint8_t additional_polite_channel_percent;
    /* additional chutil polite percent defined by user */
    uint8_t additional_polite_duty_cycle_percent;
    /* current tx util limit */
    float current_tx_util_limit;
    /* current nmax channel util percent */
    uint8_t current_max_channel_util_percent;
    /* current polite channel util percent */
    uint8_t current_polite_channel_util_percent;
    /* current polite duty cycle percent */
    uint8_t current_polite_duty_cycle_percent;
    /* auto responder */
    bool auto_responder_enabled;
    /* auto responder text */
    char auto_responder_text[60];
    /* auto responder */
    bool auto_redirect_messages;
    /* auto responder text */
    uint8_t auto_redirect_target_node_id;
    /* telemetry limiter enabled */
    bool telemetry_limiter_enabled;
    /* telemetry limiter, limit telemetry per minute */
    uint8_t telemetry_limiter_packets_per_minute;
    /* telemetry limiter, auto chanUtil limiter */
    bool telemetry_limiter_auto_chanutil_enabled;
    /* telemetry limiter, limit telemetry per minute */
    uint32_t telemetry_limiter_auto_chanutil_threshold;
    /* position limiter, enabled */
    bool position_limiter_enabled;
    /* position limiter, time threshold */
    uint32_t position_limiter_time_minutes_threshold;
    bool opportunistic_flooding_enabled;
    uint32_t opportunistic_base_delay_ms;
    uint32_t opportunistic_hop_delay_ms;
    uint32_t opportunistic_snr_gain_ms;
    uint32_t opportunistic_jitter_ms;
    bool opportunistic_cancel_on_first_hear;
    bool opportunistic_auto;
    /* Proactive traceroute scheduling and TTL controls (FW+) */
    bool proactive_traceroute_enabled;
    uint32_t traceroute_stale_ratio_threshold_percent;
    uint32_t traceroute_global_cooldown_hours;
    uint32_t traceroute_per_dest_cooldown_hours;
    uint32_t traceroute_chanutil_threshold_percent;
    uint32_t traceroute_max_per_day;
    uint32_t traceroute_expanding_ring_initial_hop;
    uint32_t traceroute_expanding_ring_max_hops;
    uint32_t traceroute_probe_jitter_ms;
    /* Optional TTL override (hours); 0 means use firmware defaults */
    uint32_t route_ttl_base_hours;
    uint32_t route_ttl_per_conf_hours;
    uint32_t route_ttl_max_hours;
    /* Routing learning thresholds (FW+)
 Minimal confidence required to use a learned route. 0 means firmware default (1). */
    uint32_t min_confidence_to_use;
    /* Hysteresis threshold for next-hop promotion in tenths of a cost unit (ETX).
 0 means firmware default (5 => 0.5 cost units). */
    uint32_t hysteresis_cost_threshold_tenths;
    /* fw+ Force disable HTTPS web server regardless of automation. Default false (HTTPS enabled).
 When true, firmware must not start HTTPS even if PSRAM is available. */
    bool force_disable_https; /* fw+ */
} meshtastic_NodeModAdmin;


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define meshtastic_NodeModAdmin_init_default     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
#define meshtastic_NodeModAdmin_init_zero        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

/* Field tags (for use in manual encoding/decoding) */
#define meshtastic_NodeModAdmin_sniffer_enabled_tag 1
#define meshtastic_NodeModAdmin_do_not_send_prv_over_mqtt_tag 2
#define meshtastic_NodeModAdmin_local_stats_over_mesh_enabled_tag 3
#define meshtastic_NodeModAdmin_local_stats_extended_over_mesh_enabled_tag 4
#define meshtastic_NodeModAdmin_idlegame_enabled_tag 5
#define meshtastic_NodeModAdmin_additional_chutil_tag 6
#define meshtastic_NodeModAdmin_additional_txutil_tag 7
#define meshtastic_NodeModAdmin_additional_polite_channel_percent_tag 8
#define meshtastic_NodeModAdmin_additional_polite_duty_cycle_percent_tag 9
#define meshtastic_NodeModAdmin_current_tx_util_limit_tag 10
#define meshtastic_NodeModAdmin_current_max_channel_util_percent_tag 11
#define meshtastic_NodeModAdmin_current_polite_channel_util_percent_tag 12
#define meshtastic_NodeModAdmin_current_polite_duty_cycle_percent_tag 13
#define meshtastic_NodeModAdmin_auto_responder_enabled_tag 14
#define meshtastic_NodeModAdmin_auto_responder_text_tag 15
#define meshtastic_NodeModAdmin_auto_redirect_messages_tag 16
#define meshtastic_NodeModAdmin_auto_redirect_target_node_id_tag 17
#define meshtastic_NodeModAdmin_telemetry_limiter_enabled_tag 18
#define meshtastic_NodeModAdmin_telemetry_limiter_packets_per_minute_tag 19
#define meshtastic_NodeModAdmin_telemetry_limiter_auto_chanutil_enabled_tag 20
#define meshtastic_NodeModAdmin_telemetry_limiter_auto_chanutil_threshold_tag 21
#define meshtastic_NodeModAdmin_position_limiter_enabled_tag 22
#define meshtastic_NodeModAdmin_position_limiter_time_minutes_threshold_tag 23
#define meshtastic_NodeModAdmin_opportunistic_flooding_enabled_tag 24
#define meshtastic_NodeModAdmin_opportunistic_base_delay_ms_tag 25
#define meshtastic_NodeModAdmin_opportunistic_hop_delay_ms_tag 26
#define meshtastic_NodeModAdmin_opportunistic_snr_gain_ms_tag 27
#define meshtastic_NodeModAdmin_opportunistic_jitter_ms_tag 28
#define meshtastic_NodeModAdmin_opportunistic_cancel_on_first_hear_tag 29
#define meshtastic_NodeModAdmin_opportunistic_auto_tag 30
#define meshtastic_NodeModAdmin_proactive_traceroute_enabled_tag 31
#define meshtastic_NodeModAdmin_traceroute_stale_ratio_threshold_percent_tag 32
#define meshtastic_NodeModAdmin_traceroute_global_cooldown_hours_tag 33
#define meshtastic_NodeModAdmin_traceroute_per_dest_cooldown_hours_tag 34
#define meshtastic_NodeModAdmin_traceroute_chanutil_threshold_percent_tag 35
#define meshtastic_NodeModAdmin_traceroute_max_per_day_tag 36
#define meshtastic_NodeModAdmin_traceroute_expanding_ring_initial_hop_tag 37
#define meshtastic_NodeModAdmin_traceroute_expanding_ring_max_hops_tag 38
#define meshtastic_NodeModAdmin_traceroute_probe_jitter_ms_tag 39
#define meshtastic_NodeModAdmin_route_ttl_base_hours_tag 40
#define meshtastic_NodeModAdmin_route_ttl_per_conf_hours_tag 41
#define meshtastic_NodeModAdmin_route_ttl_max_hours_tag 42
#define meshtastic_NodeModAdmin_min_confidence_to_use_tag 43
#define meshtastic_NodeModAdmin_hysteresis_cost_threshold_tenths_tag 44
#define meshtastic_NodeModAdmin_force_disable_https_tag 45

/* Struct field encoding specification for nanopb */
#define meshtastic_NodeModAdmin_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, BOOL,     sniffer_enabled,   1) \
X(a, STATIC,   SINGULAR, BOOL,     do_not_send_prv_over_mqtt,   2) \
X(a, STATIC,   SINGULAR, BOOL,     local_stats_over_mesh_enabled,   3) \
X(a, STATIC,   SINGULAR, BOOL,     local_stats_extended_over_mesh_enabled,   4) \
X(a, STATIC,   SINGULAR, BOOL,     idlegame_enabled,   5) \
X(a, STATIC,   SINGULAR, UINT32,   additional_chutil,   6) \
X(a, STATIC,   SINGULAR, FLOAT,    additional_txutil,   7) \
X(a, STATIC,   SINGULAR, UINT32,   additional_polite_channel_percent,   8) \
X(a, STATIC,   SINGULAR, UINT32,   additional_polite_duty_cycle_percent,   9) \
X(a, STATIC,   SINGULAR, FLOAT,    current_tx_util_limit,  10) \
X(a, STATIC,   SINGULAR, UINT32,   current_max_channel_util_percent,  11) \
X(a, STATIC,   SINGULAR, UINT32,   current_polite_channel_util_percent,  12) \
X(a, STATIC,   SINGULAR, UINT32,   current_polite_duty_cycle_percent,  13) \
X(a, STATIC,   SINGULAR, BOOL,     auto_responder_enabled,  14) \
X(a, STATIC,   SINGULAR, STRING,   auto_responder_text,  15) \
X(a, STATIC,   SINGULAR, BOOL,     auto_redirect_messages,  16) \
X(a, STATIC,   SINGULAR, UINT32,   auto_redirect_target_node_id,  17) \
X(a, STATIC,   SINGULAR, BOOL,     telemetry_limiter_enabled,  18) \
X(a, STATIC,   SINGULAR, UINT32,   telemetry_limiter_packets_per_minute,  19) \
X(a, STATIC,   SINGULAR, BOOL,     telemetry_limiter_auto_chanutil_enabled,  20) \
X(a, STATIC,   SINGULAR, UINT32,   telemetry_limiter_auto_chanutil_threshold,  21) \
X(a, STATIC,   SINGULAR, BOOL,     position_limiter_enabled,  22) \
X(a, STATIC,   SINGULAR, UINT32,   position_limiter_time_minutes_threshold,  23) \
X(a, STATIC,   SINGULAR, BOOL,     opportunistic_flooding_enabled,  24) \
X(a, STATIC,   SINGULAR, UINT32,   opportunistic_base_delay_ms,  25) \
X(a, STATIC,   SINGULAR, UINT32,   opportunistic_hop_delay_ms,  26) \
X(a, STATIC,   SINGULAR, UINT32,   opportunistic_snr_gain_ms,  27) \
X(a, STATIC,   SINGULAR, UINT32,   opportunistic_jitter_ms,  28) \
X(a, STATIC,   SINGULAR, BOOL,     opportunistic_cancel_on_first_hear,  29) \
X(a, STATIC,   SINGULAR, BOOL,     opportunistic_auto,  30) \
X(a, STATIC,   SINGULAR, BOOL,     proactive_traceroute_enabled,  31) \
X(a, STATIC,   SINGULAR, UINT32,   traceroute_stale_ratio_threshold_percent,  32) \
X(a, STATIC,   SINGULAR, UINT32,   traceroute_global_cooldown_hours,  33) \
X(a, STATIC,   SINGULAR, UINT32,   traceroute_per_dest_cooldown_hours,  34) \
X(a, STATIC,   SINGULAR, UINT32,   traceroute_chanutil_threshold_percent,  35) \
X(a, STATIC,   SINGULAR, UINT32,   traceroute_max_per_day,  36) \
X(a, STATIC,   SINGULAR, UINT32,   traceroute_expanding_ring_initial_hop,  37) \
X(a, STATIC,   SINGULAR, UINT32,   traceroute_expanding_ring_max_hops,  38) \
X(a, STATIC,   SINGULAR, UINT32,   traceroute_probe_jitter_ms,  39) \
X(a, STATIC,   SINGULAR, UINT32,   route_ttl_base_hours,  40) \
X(a, STATIC,   SINGULAR, UINT32,   route_ttl_per_conf_hours,  41) \
X(a, STATIC,   SINGULAR, UINT32,   route_ttl_max_hours,  42) \
X(a, STATIC,   SINGULAR, UINT32,   min_confidence_to_use,  43) \
X(a, STATIC,   SINGULAR, UINT32,   hysteresis_cost_threshold_tenths,  44) \
X(a, STATIC,   SINGULAR, BOOL,     force_disable_https,  45)
#define meshtastic_NodeModAdmin_CALLBACK NULL
#define meshtastic_NodeModAdmin_DEFAULT NULL

extern const pb_msgdesc_t meshtastic_NodeModAdmin_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define meshtastic_NodeModAdmin_fields &meshtastic_NodeModAdmin_msg

/* Maximum encoded size of messages (where known) */
#define MESHTASTIC_MESHTASTIC_NODE_MOD_ADMIN_PB_H_MAX_SIZE meshtastic_NodeModAdmin_size
#define meshtastic_NodeModAdmin_size             269

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
