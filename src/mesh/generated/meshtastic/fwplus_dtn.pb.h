/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.9 */

#ifndef PB_MESHTASTIC_MESHTASTIC_FWPLUS_DTN_PB_H_INCLUDED
#define PB_MESHTASTIC_MESHTASTIC_FWPLUS_DTN_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
typedef enum _meshtastic_FwplusDtnStatus {
    meshtastic_FwplusDtnStatus_FWPLUS_DTN_STATUS_UNKNOWN = 0,
    meshtastic_FwplusDtnStatus_FWPLUS_DTN_STATUS_DELIVERED = 1,
    meshtastic_FwplusDtnStatus_FWPLUS_DTN_STATUS_FAILED = 2,
    meshtastic_FwplusDtnStatus_FWPLUS_DTN_STATUS_EXPIRED = 3,
    /* Intermediate progress update (optional, for telemetry/debug) */
    meshtastic_FwplusDtnStatus_FWPLUS_DTN_STATUS_PROGRESSED = 4
} meshtastic_FwplusDtnStatus;

/* Struct definitions */
typedef PB_BYTES_ARRAY_T(240) meshtastic_FwplusDtnData_payload_t;
/* fw+ DTN overlay messages. Transported over port FWPLUS_DTN_APP. */
typedef struct _meshtastic_FwplusDtnData {
    /* Original MeshPacket id at source */
    uint32_t orig_id;
    /* Original source and destination node numbers */
    uint32_t orig_from;
    uint32_t orig_to;
    /* Channel index the original packet used */
    uint8_t channel;
    /* Original receive time at the carrier (seconds since epoch or mesh time) */
    uint32_t orig_rx_time;
    /* Absolute deadline (millis since boot or epoch depending on firmware timebase) */
    uint32_t deadline_ms;
    /* Whether payload is encrypted ciphertext (true) or plaintext (false) */
    bool is_encrypted;
    /* Allows late proxy fallback to native DM near deadline */
    bool allow_proxy_fallback;
    /* Payload bytes: plaintext or ciphertext 1:1 from original */
    meshtastic_FwplusDtnData_payload_t payload;
} meshtastic_FwplusDtnData;

typedef struct _meshtastic_FwplusDtnReceipt {
    uint32_t orig_id;
    meshtastic_FwplusDtnStatus status;
    uint16_t reason; /* optional routing error / failure reason */
} meshtastic_FwplusDtnReceipt;

/* Top-level container for FW+ DTN app messages */
typedef struct _meshtastic_FwplusDtn {
    pb_size_t which_variant;
    union {
        meshtastic_FwplusDtnData data;
        meshtastic_FwplusDtnReceipt receipt;
    } variant;
} meshtastic_FwplusDtn;


#ifdef __cplusplus
extern "C" {
#endif

/* Helper constants for enums */
#define _meshtastic_FwplusDtnStatus_MIN meshtastic_FwplusDtnStatus_FWPLUS_DTN_STATUS_UNKNOWN
#define _meshtastic_FwplusDtnStatus_MAX meshtastic_FwplusDtnStatus_FWPLUS_DTN_STATUS_PROGRESSED
#define _meshtastic_FwplusDtnStatus_ARRAYSIZE ((meshtastic_FwplusDtnStatus)(meshtastic_FwplusDtnStatus_FWPLUS_DTN_STATUS_PROGRESSED+1))


#define meshtastic_FwplusDtnReceipt_status_ENUMTYPE meshtastic_FwplusDtnStatus



/* Initializer values for message structs */
#define meshtastic_FwplusDtnData_init_default    {0, 0, 0, 0, 0, 0, 0, 0, {0, {0}}}
#define meshtastic_FwplusDtnReceipt_init_default {0, _meshtastic_FwplusDtnStatus_MIN, 0}
#define meshtastic_FwplusDtn_init_default        {0, {meshtastic_FwplusDtnData_init_default}}
#define meshtastic_FwplusDtnData_init_zero       {0, 0, 0, 0, 0, 0, 0, 0, {0, {0}}}
#define meshtastic_FwplusDtnReceipt_init_zero    {0, _meshtastic_FwplusDtnStatus_MIN, 0}
#define meshtastic_FwplusDtn_init_zero           {0, {meshtastic_FwplusDtnData_init_zero}}

/* Field tags (for use in manual encoding/decoding) */
#define meshtastic_FwplusDtnData_orig_id_tag     1
#define meshtastic_FwplusDtnData_orig_from_tag   2
#define meshtastic_FwplusDtnData_orig_to_tag     3
#define meshtastic_FwplusDtnData_channel_tag     4
#define meshtastic_FwplusDtnData_orig_rx_time_tag 5
#define meshtastic_FwplusDtnData_deadline_ms_tag 6
#define meshtastic_FwplusDtnData_is_encrypted_tag 7
#define meshtastic_FwplusDtnData_allow_proxy_fallback_tag 8
#define meshtastic_FwplusDtnData_payload_tag     9
#define meshtastic_FwplusDtnReceipt_orig_id_tag  1
#define meshtastic_FwplusDtnReceipt_status_tag   2
#define meshtastic_FwplusDtnReceipt_reason_tag   3
#define meshtastic_FwplusDtn_data_tag            1
#define meshtastic_FwplusDtn_receipt_tag         2

/* Struct field encoding specification for nanopb */
#define meshtastic_FwplusDtnData_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   orig_id,           1) \
X(a, STATIC,   SINGULAR, UINT32,   orig_from,         2) \
X(a, STATIC,   SINGULAR, UINT32,   orig_to,           3) \
X(a, STATIC,   SINGULAR, UINT32,   channel,           4) \
X(a, STATIC,   SINGULAR, UINT32,   orig_rx_time,      5) \
X(a, STATIC,   SINGULAR, UINT32,   deadline_ms,       6) \
X(a, STATIC,   SINGULAR, BOOL,     is_encrypted,      7) \
X(a, STATIC,   SINGULAR, BOOL,     allow_proxy_fallback,   8) \
X(a, STATIC,   SINGULAR, BYTES,    payload,           9)
#define meshtastic_FwplusDtnData_CALLBACK NULL
#define meshtastic_FwplusDtnData_DEFAULT NULL

#define meshtastic_FwplusDtnReceipt_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   orig_id,           1) \
X(a, STATIC,   SINGULAR, UENUM,    status,            2) \
X(a, STATIC,   SINGULAR, UINT32,   reason,            3)
#define meshtastic_FwplusDtnReceipt_CALLBACK NULL
#define meshtastic_FwplusDtnReceipt_DEFAULT NULL

#define meshtastic_FwplusDtn_FIELDLIST(X, a) \
X(a, STATIC,   ONEOF,    MESSAGE,  (variant,data,variant.data),   1) \
X(a, STATIC,   ONEOF,    MESSAGE,  (variant,receipt,variant.receipt),   2)
#define meshtastic_FwplusDtn_CALLBACK NULL
#define meshtastic_FwplusDtn_DEFAULT NULL
#define meshtastic_FwplusDtn_variant_data_MSGTYPE meshtastic_FwplusDtnData
#define meshtastic_FwplusDtn_variant_receipt_MSGTYPE meshtastic_FwplusDtnReceipt

extern const pb_msgdesc_t meshtastic_FwplusDtnData_msg;
extern const pb_msgdesc_t meshtastic_FwplusDtnReceipt_msg;
extern const pb_msgdesc_t meshtastic_FwplusDtn_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define meshtastic_FwplusDtnData_fields &meshtastic_FwplusDtnData_msg
#define meshtastic_FwplusDtnReceipt_fields &meshtastic_FwplusDtnReceipt_msg
#define meshtastic_FwplusDtn_fields &meshtastic_FwplusDtn_msg

/* Maximum encoded size of messages (where known) */
#define MESHTASTIC_MESHTASTIC_FWPLUS_DTN_PB_H_MAX_SIZE meshtastic_FwplusDtn_size
#define meshtastic_FwplusDtnData_size            280
#define meshtastic_FwplusDtnReceipt_size         12
#define meshtastic_FwplusDtn_size                283

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
